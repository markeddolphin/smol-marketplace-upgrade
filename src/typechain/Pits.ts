/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface PitsInterface extends utils.Interface {
  functions: {
    "bones()": FunctionFragment;
    "bonesStaked()": FunctionFragment;
    "cancelOwnershipHandover()": FunctionFragment;
    "completeOwnershipHandover(address)": FunctionFragment;
    "getBonesStaked(address)": FunctionFragment;
    "getDaysOff(uint256)": FunctionFragment;
    "getTimeOut()": FunctionFragment;
    "getTotalBonesStaked()": FunctionFragment;
    "getTotalDaysOff()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "minimumPercent()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownershipHandoverExpiresAt(address)": FunctionFragment;
    "ownershipHandoverValidFor()": FunctionFragment;
    "removeBonesFromYard(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestOwnershipHandover()": FunctionFragment;
    "setMinimumPercent(uint256)": FunctionFragment;
    "stakeBonesInYard(uint256)": FunctionFragment;
    "timeOut()": FunctionFragment;
    "totalDaysOff()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "validation()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bones"
      | "bonesStaked"
      | "cancelOwnershipHandover"
      | "completeOwnershipHandover"
      | "getBonesStaked"
      | "getDaysOff"
      | "getTimeOut"
      | "getTotalBonesStaked"
      | "getTotalDaysOff"
      | "initialize"
      | "minimumPercent"
      | "owner"
      | "ownershipHandoverExpiresAt"
      | "ownershipHandoverValidFor"
      | "removeBonesFromYard"
      | "renounceOwnership"
      | "requestOwnershipHandover"
      | "setMinimumPercent"
      | "stakeBonesInYard"
      | "timeOut"
      | "totalDaysOff"
      | "transferOwnership"
      | "validation"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "bones", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bonesStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOwnershipHandover",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "completeOwnershipHandover",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBonesStaked",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDaysOff",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimeOut",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBonesStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDaysOff",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "minimumPercent",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownershipHandoverExpiresAt",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "ownershipHandoverValidFor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeBonesFromYard",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestOwnershipHandover",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumPercent",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeBonesInYard",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "timeOut", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalDaysOff",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "validation",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "bones", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bonesStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOwnershipHandover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeOwnershipHandover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBonesStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDaysOff", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTimeOut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBonesStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDaysOff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minimumPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownershipHandoverExpiresAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownershipHandoverValidFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeBonesFromYard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestOwnershipHandover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeBonesInYard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "timeOut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalDaysOff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "validation", data: BytesLike): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "OwnershipHandoverCanceled(address)": EventFragment;
    "OwnershipHandoverRequested(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RemoveBonesFromYard(address,uint256)": EventFragment;
    "StakeBonesInYard(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipHandoverCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipHandoverRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveBonesFromYard"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeBonesInYard"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipHandoverCanceledEventObject {
  pendingOwner: string;
}
export type OwnershipHandoverCanceledEvent = TypedEvent<
  [string],
  OwnershipHandoverCanceledEventObject
>;

export type OwnershipHandoverCanceledEventFilter =
  TypedEventFilter<OwnershipHandoverCanceledEvent>;

export interface OwnershipHandoverRequestedEventObject {
  pendingOwner: string;
}
export type OwnershipHandoverRequestedEvent = TypedEvent<
  [string],
  OwnershipHandoverRequestedEventObject
>;

export type OwnershipHandoverRequestedEventFilter =
  TypedEventFilter<OwnershipHandoverRequestedEvent>;

export interface OwnershipTransferredEventObject {
  oldOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RemoveBonesFromYardEventObject {
  owner: string;
  amount: BigNumber;
}
export type RemoveBonesFromYardEvent = TypedEvent<
  [string, BigNumber],
  RemoveBonesFromYardEventObject
>;

export type RemoveBonesFromYardEventFilter =
  TypedEventFilter<RemoveBonesFromYardEvent>;

export interface StakeBonesInYardEventObject {
  owner: string;
  amount: BigNumber;
}
export type StakeBonesInYardEvent = TypedEvent<
  [string, BigNumber],
  StakeBonesInYardEventObject
>;

export type StakeBonesInYardEventFilter =
  TypedEventFilter<StakeBonesInYardEvent>;

export interface Pits extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PitsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bones(overrides?: CallOverrides): Promise<[string]>;

    bonesStaked(overrides?: CallOverrides): Promise<[BigNumber]>;

    cancelOwnershipHandover(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    completeOwnershipHandover(
      pendingOwner: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBonesStaked(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDaysOff(
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTimeOut(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalBonesStaked(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalDaysOff(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _bones: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    minimumPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string] & { result: string }>;

    ownershipHandoverExpiresAt(
      pendingOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { result: BigNumber }>;

    ownershipHandoverValidFor(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeBonesFromYard(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestOwnershipHandover(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinimumPercent(
      _minimumPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakeBonesInYard(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    timeOut(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalDaysOff(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validation(overrides?: CallOverrides): Promise<[boolean]>;
  };

  bones(overrides?: CallOverrides): Promise<string>;

  bonesStaked(overrides?: CallOverrides): Promise<BigNumber>;

  cancelOwnershipHandover(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  completeOwnershipHandover(
    pendingOwner: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBonesStaked(
    _addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDaysOff(
    _timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTimeOut(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalBonesStaked(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalDaysOff(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _bones: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  minimumPercent(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownershipHandoverExpiresAt(
    pendingOwner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ownershipHandoverValidFor(overrides?: CallOverrides): Promise<BigNumber>;

  removeBonesFromYard(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestOwnershipHandover(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinimumPercent(
    _minimumPercent: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakeBonesInYard(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  timeOut(overrides?: CallOverrides): Promise<BigNumber>;

  totalDaysOff(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validation(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    bones(overrides?: CallOverrides): Promise<string>;

    bonesStaked(overrides?: CallOverrides): Promise<BigNumber>;

    cancelOwnershipHandover(overrides?: CallOverrides): Promise<void>;

    completeOwnershipHandover(
      pendingOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getBonesStaked(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDaysOff(
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimeOut(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalBonesStaked(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalDaysOff(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _bones: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    minimumPercent(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownershipHandoverExpiresAt(
      pendingOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownershipHandoverValidFor(overrides?: CallOverrides): Promise<BigNumber>;

    removeBonesFromYard(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requestOwnershipHandover(overrides?: CallOverrides): Promise<void>;

    setMinimumPercent(
      _minimumPercent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeBonesInYard(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    timeOut(overrides?: CallOverrides): Promise<BigNumber>;

    totalDaysOff(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    validation(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipHandoverCanceled(address)"(
      pendingOwner?: PromiseOrValue<string> | null
    ): OwnershipHandoverCanceledEventFilter;
    OwnershipHandoverCanceled(
      pendingOwner?: PromiseOrValue<string> | null
    ): OwnershipHandoverCanceledEventFilter;

    "OwnershipHandoverRequested(address)"(
      pendingOwner?: PromiseOrValue<string> | null
    ): OwnershipHandoverRequestedEventFilter;
    OwnershipHandoverRequested(
      pendingOwner?: PromiseOrValue<string> | null
    ): OwnershipHandoverRequestedEventFilter;

    "OwnershipTransferred(address,address)"(
      oldOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      oldOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RemoveBonesFromYard(address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): RemoveBonesFromYardEventFilter;
    RemoveBonesFromYard(
      owner?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): RemoveBonesFromYardEventFilter;

    "StakeBonesInYard(address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): StakeBonesInYardEventFilter;
    StakeBonesInYard(
      owner?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): StakeBonesInYardEventFilter;
  };

  estimateGas: {
    bones(overrides?: CallOverrides): Promise<BigNumber>;

    bonesStaked(overrides?: CallOverrides): Promise<BigNumber>;

    cancelOwnershipHandover(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    completeOwnershipHandover(
      pendingOwner: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBonesStaked(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDaysOff(
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimeOut(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalBonesStaked(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalDaysOff(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _bones: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    minimumPercent(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownershipHandoverExpiresAt(
      pendingOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownershipHandoverValidFor(overrides?: CallOverrides): Promise<BigNumber>;

    removeBonesFromYard(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestOwnershipHandover(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinimumPercent(
      _minimumPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakeBonesInYard(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    timeOut(overrides?: CallOverrides): Promise<BigNumber>;

    totalDaysOff(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validation(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    bones(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bonesStaked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelOwnershipHandover(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    completeOwnershipHandover(
      pendingOwner: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBonesStaked(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDaysOff(
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimeOut(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalBonesStaked(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalDaysOff(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _bones: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    minimumPercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownershipHandoverExpiresAt(
      pendingOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownershipHandoverValidFor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeBonesFromYard(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestOwnershipHandover(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinimumPercent(
      _minimumPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakeBonesInYard(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    timeOut(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalDaysOff(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validation(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
