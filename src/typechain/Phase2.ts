/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace Lib {
  export type CavesStruct = {
    owner: PromiseOrValue<string>;
    stakingTime: PromiseOrValue<BigNumberish>;
    lastRewardTimestamp: PromiseOrValue<BigNumberish>;
  };

  export type CavesStructOutput = [string, number, number] & {
    owner: string;
    stakingTime: number;
    lastRewardTimestamp: number;
  };

  export type DevelopmentGroundStruct = {
    owner: PromiseOrValue<string>;
    lockPeriod: PromiseOrValue<BigNumberish>;
    amountPosition: PromiseOrValue<BigNumberish>;
    entryTime: PromiseOrValue<BigNumberish>;
    lastRewardTime: PromiseOrValue<BigNumberish>;
    bonesStaked: PromiseOrValue<BigNumberish>;
    currentPitsLockPeriod: PromiseOrValue<BigNumberish>;
    ground: PromiseOrValue<BigNumberish>;
  };

  export type DevelopmentGroundStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number
  ] & {
    owner: string;
    lockPeriod: BigNumber;
    amountPosition: BigNumber;
    entryTime: BigNumber;
    lastRewardTime: BigNumber;
    bonesStaked: BigNumber;
    currentPitsLockPeriod: BigNumber;
    ground: number;
  };

  export type LaborGroundStruct = {
    owner: PromiseOrValue<string>;
    lockTime: PromiseOrValue<BigNumberish>;
    supplyId: PromiseOrValue<BigNumberish>;
    animalId: PromiseOrValue<BigNumberish>;
    requestId: PromiseOrValue<BigNumberish>;
    job: PromiseOrValue<BigNumberish>;
  };

  export type LaborGroundStructOutput = [
    string,
    number,
    number,
    number,
    BigNumber,
    number
  ] & {
    owner: string;
    lockTime: number;
    supplyId: number;
    animalId: number;
    requestId: BigNumber;
    job: number;
  };
}

export interface Phase2Interface extends utils.Interface {
  functions: {
    "bringInAnimalsToLaborGround(uint256[],uint256[])": FunctionFragment;
    "claimCaveReward(uint256[])": FunctionFragment;
    "claimCollectables(uint256[])": FunctionFragment;
    "claimDevelopmentGroundBonesReward(uint256[],bool[])": FunctionFragment;
    "enterCaves(uint256[])": FunctionFragment;
    "enterDevelopmentGround(uint256[],uint256[],uint8[])": FunctionFragment;
    "enterLaborGround(uint256[],uint256[],uint8[])": FunctionFragment;
    "getAddress()": FunctionFragment;
    "getCavesInfo(uint256)": FunctionFragment;
    "getCavesReward(uint256)": FunctionFragment;
    "getDevelopmentGroundBonesReward(uint256)": FunctionFragment;
    "getDevelopmentGroundInfo(uint256)": FunctionFragment;
    "getLaborGroundInfo(uint256)": FunctionFragment;
    "getPrimarySkill(uint256)": FunctionFragment;
    "initialize(address,address,address,address,address,address,address)": FunctionFragment;
    "leaveCave(uint256[])": FunctionFragment;
    "leaveDevelopmentGround(uint256[])": FunctionFragment;
    "leaveLaborGround(uint256[])": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "removeAnimalsFromLaborGround(uint256[],uint256[])": FunctionFragment;
    "removeBones(uint256[],bool[])": FunctionFragment;
    "stakeBonesInDevelopmentGround(uint256[],uint256[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bringInAnimalsToLaborGround"
      | "claimCaveReward"
      | "claimCollectables"
      | "claimDevelopmentGroundBonesReward"
      | "enterCaves"
      | "enterDevelopmentGround"
      | "enterLaborGround"
      | "getAddress"
      | "getCavesInfo"
      | "getCavesReward"
      | "getDevelopmentGroundBonesReward"
      | "getDevelopmentGroundInfo"
      | "getLaborGroundInfo"
      | "getPrimarySkill"
      | "initialize"
      | "leaveCave"
      | "leaveDevelopmentGround"
      | "leaveLaborGround"
      | "onERC1155Received"
      | "removeAnimalsFromLaborGround"
      | "removeBones"
      | "stakeBonesInDevelopmentGround"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bringInAnimalsToLaborGround",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimCaveReward",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimCollectables",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimDevelopmentGroundBonesReward",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<boolean>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "enterCaves",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "enterDevelopmentGround",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "enterLaborGround",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCavesInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCavesReward",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDevelopmentGroundBonesReward",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDevelopmentGroundInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLaborGroundInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrimarySkill",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "leaveCave",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "leaveDevelopmentGround",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "leaveLaborGround",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAnimalsFromLaborGround",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeBones",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<boolean>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeBonesInDevelopmentGround",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "bringInAnimalsToLaborGround",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimCaveReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimCollectables",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimDevelopmentGroundBonesReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "enterCaves", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "enterDevelopmentGround",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enterLaborGround",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCavesInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCavesReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDevelopmentGroundBonesReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDevelopmentGroundInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLaborGroundInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPrimarySkill",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "leaveCave", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "leaveDevelopmentGround",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "leaveLaborGround",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAnimalsFromLaborGround",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeBones",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeBonesInDevelopmentGround",
    data: BytesLike
  ): Result;

  events: {
    "BringInAnimalsToLaborGround(address,uint256,uint256)": EventFragment;
    "ClaimCaveReward(address,uint256,uint256)": EventFragment;
    "ClaimCollectable(address,uint256)": EventFragment;
    "ClaimDevelopmentGroundBonesReward(address,uint256,bool)": EventFragment;
    "EnterCaves(address,uint256,uint256)": EventFragment;
    "EnterDevelopmentGround(address,uint256,uint256,uint256,uint8)": EventFragment;
    "EnterLaborGround(address,uint256,uint256,uint8)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "LeaveDevelopmentGround(address,uint256)": EventFragment;
    "LeaveLaborGround(address,uint256)": EventFragment;
    "RemoveAnimalsFromLaborGround(address,uint256,uint256)": EventFragment;
    "RemoveBones(address,uint256,uint256)": EventFragment;
    "StakeBonesInDevelopmentGround(address,uint256,uint256)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "BringInAnimalsToLaborGround"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimCaveReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimCollectable"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ClaimDevelopmentGroundBonesReward"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnterCaves"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnterDevelopmentGround"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnterLaborGround"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LeaveDevelopmentGround"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LeaveLaborGround"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RemoveAnimalsFromLaborGround"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveBones"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "StakeBonesInDevelopmentGround"
  ): EventFragment;
}

export interface BringInAnimalsToLaborGroundEventObject {
  owner: string;
  tokenId: BigNumber;
  animalsId: BigNumber;
}
export type BringInAnimalsToLaborGroundEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  BringInAnimalsToLaborGroundEventObject
>;

export type BringInAnimalsToLaborGroundEventFilter =
  TypedEventFilter<BringInAnimalsToLaborGroundEvent>;

export interface ClaimCaveRewardEventObject {
  owner: string;
  tokenId: BigNumber;
  amount: BigNumber;
}
export type ClaimCaveRewardEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ClaimCaveRewardEventObject
>;

export type ClaimCaveRewardEventFilter = TypedEventFilter<ClaimCaveRewardEvent>;

export interface ClaimCollectableEventObject {
  owner: string;
  tokenId: BigNumber;
}
export type ClaimCollectableEvent = TypedEvent<
  [string, BigNumber],
  ClaimCollectableEventObject
>;

export type ClaimCollectableEventFilter =
  TypedEventFilter<ClaimCollectableEvent>;

export interface ClaimDevelopmentGroundBonesRewardEventObject {
  owner: string;
  tokenId: BigNumber;
  stake: boolean;
}
export type ClaimDevelopmentGroundBonesRewardEvent = TypedEvent<
  [string, BigNumber, boolean],
  ClaimDevelopmentGroundBonesRewardEventObject
>;

export type ClaimDevelopmentGroundBonesRewardEventFilter =
  TypedEventFilter<ClaimDevelopmentGroundBonesRewardEvent>;

export interface EnterCavesEventObject {
  owner: string;
  tokenId: BigNumber;
  stakeTime: BigNumber;
}
export type EnterCavesEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  EnterCavesEventObject
>;

export type EnterCavesEventFilter = TypedEventFilter<EnterCavesEvent>;

export interface EnterDevelopmentGroundEventObject {
  owner: string;
  tokenId: BigNumber;
  lockTime: BigNumber;
  entryTime: BigNumber;
  ground: number;
}
export type EnterDevelopmentGroundEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, number],
  EnterDevelopmentGroundEventObject
>;

export type EnterDevelopmentGroundEventFilter =
  TypedEventFilter<EnterDevelopmentGroundEvent>;

export interface EnterLaborGroundEventObject {
  owner: string;
  tokenId: BigNumber;
  supplyId: BigNumber;
  job: number;
}
export type EnterLaborGroundEvent = TypedEvent<
  [string, BigNumber, BigNumber, number],
  EnterLaborGroundEventObject
>;

export type EnterLaborGroundEventFilter =
  TypedEventFilter<EnterLaborGroundEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface LeaveDevelopmentGroundEventObject {
  owner: string;
  tokenId: BigNumber;
}
export type LeaveDevelopmentGroundEvent = TypedEvent<
  [string, BigNumber],
  LeaveDevelopmentGroundEventObject
>;

export type LeaveDevelopmentGroundEventFilter =
  TypedEventFilter<LeaveDevelopmentGroundEvent>;

export interface LeaveLaborGroundEventObject {
  owner: string;
  tokenId: BigNumber;
}
export type LeaveLaborGroundEvent = TypedEvent<
  [string, BigNumber],
  LeaveLaborGroundEventObject
>;

export type LeaveLaborGroundEventFilter =
  TypedEventFilter<LeaveLaborGroundEvent>;

export interface RemoveAnimalsFromLaborGroundEventObject {
  owner: string;
  tokenId: BigNumber;
  animalsId: BigNumber;
}
export type RemoveAnimalsFromLaborGroundEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  RemoveAnimalsFromLaborGroundEventObject
>;

export type RemoveAnimalsFromLaborGroundEventFilter =
  TypedEventFilter<RemoveAnimalsFromLaborGroundEvent>;

export interface RemoveBonesEventObject {
  owner: string;
  tokenId: BigNumber;
  amount: BigNumber;
}
export type RemoveBonesEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  RemoveBonesEventObject
>;

export type RemoveBonesEventFilter = TypedEventFilter<RemoveBonesEvent>;

export interface StakeBonesInDevelopmentGroundEventObject {
  owner: string;
  amount: BigNumber;
  tokenId: BigNumber;
}
export type StakeBonesInDevelopmentGroundEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  StakeBonesInDevelopmentGroundEventObject
>;

export type StakeBonesInDevelopmentGroundEventFilter =
  TypedEventFilter<StakeBonesInDevelopmentGroundEvent>;

export interface Phase2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: Phase2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bringInAnimalsToLaborGround(
      _tokenId: PromiseOrValue<BigNumberish>[],
      _animalsId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimCaveReward(
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimCollectables(
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimDevelopmentGroundBonesReward(
      _tokenId: PromiseOrValue<BigNumberish>[],
      _stake: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    enterCaves(
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    enterDevelopmentGround(
      _tokenId: PromiseOrValue<BigNumberish>[],
      _lockTime: PromiseOrValue<BigNumberish>[],
      _ground: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    enterLaborGround(
      _tokenId: PromiseOrValue<BigNumberish>[],
      _supplyId: PromiseOrValue<BigNumberish>[],
      _job: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAddress(
      overrides?: CallOverrides
    ): Promise<[string, string, string, string, string, string, string]>;

    getCavesInfo(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Lib.CavesStructOutput]>;

    getCavesReward(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDevelopmentGroundBonesReward(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDevelopmentGroundInfo(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Lib.DevelopmentGroundStructOutput]>;

    getLaborGroundInfo(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Lib.LaborGroundStructOutput]>;

    getPrimarySkill(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      _pits: PromiseOrValue<string>,
      _bones: PromiseOrValue<string>,
      _animals: PromiseOrValue<string>,
      _supplies: PromiseOrValue<string>,
      _consumables: PromiseOrValue<string>,
      _neandersmol: PromiseOrValue<string>,
      _randomizer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    leaveCave(
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    leaveDevelopmentGround(
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    leaveLaborGround(
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    removeAnimalsFromLaborGround(
      _tokenId: PromiseOrValue<BigNumberish>[],
      _animalsId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeBones(
      _tokenId: PromiseOrValue<BigNumberish>[],
      _all: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakeBonesInDevelopmentGround(
      _amount: PromiseOrValue<BigNumberish>[],
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  bringInAnimalsToLaborGround(
    _tokenId: PromiseOrValue<BigNumberish>[],
    _animalsId: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimCaveReward(
    _tokenId: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimCollectables(
    _tokenId: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimDevelopmentGroundBonesReward(
    _tokenId: PromiseOrValue<BigNumberish>[],
    _stake: PromiseOrValue<boolean>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  enterCaves(
    _tokenId: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  enterDevelopmentGround(
    _tokenId: PromiseOrValue<BigNumberish>[],
    _lockTime: PromiseOrValue<BigNumberish>[],
    _ground: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  enterLaborGround(
    _tokenId: PromiseOrValue<BigNumberish>[],
    _supplyId: PromiseOrValue<BigNumberish>[],
    _job: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAddress(
    overrides?: CallOverrides
  ): Promise<[string, string, string, string, string, string, string]>;

  getCavesInfo(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Lib.CavesStructOutput>;

  getCavesReward(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDevelopmentGroundBonesReward(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDevelopmentGroundInfo(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Lib.DevelopmentGroundStructOutput>;

  getLaborGroundInfo(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Lib.LaborGroundStructOutput>;

  getPrimarySkill(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    _pits: PromiseOrValue<string>,
    _bones: PromiseOrValue<string>,
    _animals: PromiseOrValue<string>,
    _supplies: PromiseOrValue<string>,
    _consumables: PromiseOrValue<string>,
    _neandersmol: PromiseOrValue<string>,
    _randomizer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  leaveCave(
    _tokenId: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  leaveDevelopmentGround(
    _tokenId: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  leaveLaborGround(
    _tokenId: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onERC1155Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BigNumberish>,
    arg4: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  removeAnimalsFromLaborGround(
    _tokenId: PromiseOrValue<BigNumberish>[],
    _animalsId: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeBones(
    _tokenId: PromiseOrValue<BigNumberish>[],
    _all: PromiseOrValue<boolean>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakeBonesInDevelopmentGround(
    _amount: PromiseOrValue<BigNumberish>[],
    _tokenId: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bringInAnimalsToLaborGround(
      _tokenId: PromiseOrValue<BigNumberish>[],
      _animalsId: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimCaveReward(
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimCollectables(
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimDevelopmentGroundBonesReward(
      _tokenId: PromiseOrValue<BigNumberish>[],
      _stake: PromiseOrValue<boolean>[],
      overrides?: CallOverrides
    ): Promise<void>;

    enterCaves(
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    enterDevelopmentGround(
      _tokenId: PromiseOrValue<BigNumberish>[],
      _lockTime: PromiseOrValue<BigNumberish>[],
      _ground: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    enterLaborGround(
      _tokenId: PromiseOrValue<BigNumberish>[],
      _supplyId: PromiseOrValue<BigNumberish>[],
      _job: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    getAddress(
      overrides?: CallOverrides
    ): Promise<[string, string, string, string, string, string, string]>;

    getCavesInfo(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Lib.CavesStructOutput>;

    getCavesReward(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDevelopmentGroundBonesReward(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDevelopmentGroundInfo(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Lib.DevelopmentGroundStructOutput>;

    getLaborGroundInfo(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Lib.LaborGroundStructOutput>;

    getPrimarySkill(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _pits: PromiseOrValue<string>,
      _bones: PromiseOrValue<string>,
      _animals: PromiseOrValue<string>,
      _supplies: PromiseOrValue<string>,
      _consumables: PromiseOrValue<string>,
      _neandersmol: PromiseOrValue<string>,
      _randomizer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    leaveCave(
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    leaveDevelopmentGround(
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    leaveLaborGround(
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    removeAnimalsFromLaborGround(
      _tokenId: PromiseOrValue<BigNumberish>[],
      _animalsId: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    removeBones(
      _tokenId: PromiseOrValue<BigNumberish>[],
      _all: PromiseOrValue<boolean>[],
      overrides?: CallOverrides
    ): Promise<void>;

    stakeBonesInDevelopmentGround(
      _amount: PromiseOrValue<BigNumberish>[],
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BringInAnimalsToLaborGround(address,uint256,uint256)"(
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      animalsId?: PromiseOrValue<BigNumberish> | null
    ): BringInAnimalsToLaborGroundEventFilter;
    BringInAnimalsToLaborGround(
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      animalsId?: PromiseOrValue<BigNumberish> | null
    ): BringInAnimalsToLaborGroundEventFilter;

    "ClaimCaveReward(address,uint256,uint256)"(
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): ClaimCaveRewardEventFilter;
    ClaimCaveReward(
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): ClaimCaveRewardEventFilter;

    "ClaimCollectable(address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ClaimCollectableEventFilter;
    ClaimCollectable(
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ClaimCollectableEventFilter;

    "ClaimDevelopmentGroundBonesReward(address,uint256,bool)"(
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      stake?: PromiseOrValue<boolean> | null
    ): ClaimDevelopmentGroundBonesRewardEventFilter;
    ClaimDevelopmentGroundBonesReward(
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      stake?: PromiseOrValue<boolean> | null
    ): ClaimDevelopmentGroundBonesRewardEventFilter;

    "EnterCaves(address,uint256,uint256)"(
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      stakeTime?: PromiseOrValue<BigNumberish> | null
    ): EnterCavesEventFilter;
    EnterCaves(
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      stakeTime?: PromiseOrValue<BigNumberish> | null
    ): EnterCavesEventFilter;

    "EnterDevelopmentGround(address,uint256,uint256,uint256,uint8)"(
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      lockTime?: PromiseOrValue<BigNumberish> | null,
      entryTime?: null,
      ground?: null
    ): EnterDevelopmentGroundEventFilter;
    EnterDevelopmentGround(
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      lockTime?: PromiseOrValue<BigNumberish> | null,
      entryTime?: null,
      ground?: null
    ): EnterDevelopmentGroundEventFilter;

    "EnterLaborGround(address,uint256,uint256,uint8)"(
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      supplyId?: PromiseOrValue<BigNumberish> | null,
      job?: null
    ): EnterLaborGroundEventFilter;
    EnterLaborGround(
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      supplyId?: PromiseOrValue<BigNumberish> | null,
      job?: null
    ): EnterLaborGroundEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "LeaveDevelopmentGround(address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): LeaveDevelopmentGroundEventFilter;
    LeaveDevelopmentGround(
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): LeaveDevelopmentGroundEventFilter;

    "LeaveLaborGround(address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): LeaveLaborGroundEventFilter;
    LeaveLaborGround(
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): LeaveLaborGroundEventFilter;

    "RemoveAnimalsFromLaborGround(address,uint256,uint256)"(
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      animalsId?: PromiseOrValue<BigNumberish> | null
    ): RemoveAnimalsFromLaborGroundEventFilter;
    RemoveAnimalsFromLaborGround(
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      animalsId?: PromiseOrValue<BigNumberish> | null
    ): RemoveAnimalsFromLaborGroundEventFilter;

    "RemoveBones(address,uint256,uint256)"(
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): RemoveBonesEventFilter;
    RemoveBones(
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): RemoveBonesEventFilter;

    "StakeBonesInDevelopmentGround(address,uint256,uint256)"(
      owner?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): StakeBonesInDevelopmentGroundEventFilter;
    StakeBonesInDevelopmentGround(
      owner?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): StakeBonesInDevelopmentGroundEventFilter;
  };

  estimateGas: {
    bringInAnimalsToLaborGround(
      _tokenId: PromiseOrValue<BigNumberish>[],
      _animalsId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimCaveReward(
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimCollectables(
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimDevelopmentGroundBonesReward(
      _tokenId: PromiseOrValue<BigNumberish>[],
      _stake: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    enterCaves(
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    enterDevelopmentGround(
      _tokenId: PromiseOrValue<BigNumberish>[],
      _lockTime: PromiseOrValue<BigNumberish>[],
      _ground: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    enterLaborGround(
      _tokenId: PromiseOrValue<BigNumberish>[],
      _supplyId: PromiseOrValue<BigNumberish>[],
      _job: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getCavesInfo(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCavesReward(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDevelopmentGroundBonesReward(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDevelopmentGroundInfo(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLaborGroundInfo(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrimarySkill(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _pits: PromiseOrValue<string>,
      _bones: PromiseOrValue<string>,
      _animals: PromiseOrValue<string>,
      _supplies: PromiseOrValue<string>,
      _consumables: PromiseOrValue<string>,
      _neandersmol: PromiseOrValue<string>,
      _randomizer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    leaveCave(
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    leaveDevelopmentGround(
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    leaveLaborGround(
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeAnimalsFromLaborGround(
      _tokenId: PromiseOrValue<BigNumberish>[],
      _animalsId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeBones(
      _tokenId: PromiseOrValue<BigNumberish>[],
      _all: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakeBonesInDevelopmentGround(
      _amount: PromiseOrValue<BigNumberish>[],
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bringInAnimalsToLaborGround(
      _tokenId: PromiseOrValue<BigNumberish>[],
      _animalsId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimCaveReward(
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimCollectables(
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimDevelopmentGroundBonesReward(
      _tokenId: PromiseOrValue<BigNumberish>[],
      _stake: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    enterCaves(
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    enterDevelopmentGround(
      _tokenId: PromiseOrValue<BigNumberish>[],
      _lockTime: PromiseOrValue<BigNumberish>[],
      _ground: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    enterLaborGround(
      _tokenId: PromiseOrValue<BigNumberish>[],
      _supplyId: PromiseOrValue<BigNumberish>[],
      _job: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCavesInfo(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCavesReward(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDevelopmentGroundBonesReward(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDevelopmentGroundInfo(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLaborGroundInfo(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrimarySkill(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _pits: PromiseOrValue<string>,
      _bones: PromiseOrValue<string>,
      _animals: PromiseOrValue<string>,
      _supplies: PromiseOrValue<string>,
      _consumables: PromiseOrValue<string>,
      _neandersmol: PromiseOrValue<string>,
      _randomizer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    leaveCave(
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    leaveDevelopmentGround(
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    leaveLaborGround(
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeAnimalsFromLaborGround(
      _tokenId: PromiseOrValue<BigNumberish>[],
      _animalsId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeBones(
      _tokenId: PromiseOrValue<BigNumberish>[],
      _all: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakeBonesInDevelopmentGround(
      _amount: PromiseOrValue<BigNumberish>[],
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
