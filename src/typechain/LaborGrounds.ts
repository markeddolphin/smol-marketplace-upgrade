/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type LaborGroundFeInfoStruct = {
  timeLeft: PromiseOrValue<BigNumberish>;
  tokenId: PromiseOrValue<BigNumberish>;
  animalId: PromiseOrValue<BigNumberish>;
  supplyId: PromiseOrValue<BigNumberish>;
};

export type LaborGroundFeInfoStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  timeLeft: BigNumber;
  tokenId: BigNumber;
  animalId: BigNumber;
  supplyId: BigNumber;
};

export type LaborGroundStruct = {
  owner: PromiseOrValue<string>;
  lockTime: PromiseOrValue<BigNumberish>;
  supplyId: PromiseOrValue<BigNumberish>;
  animalId: PromiseOrValue<BigNumberish>;
  requestId: PromiseOrValue<BigNumberish>;
  job: PromiseOrValue<BigNumberish>;
};

export type LaborGroundStructOutput = [
  string,
  number,
  number,
  number,
  BigNumber,
  number
] & {
  owner: string;
  lockTime: number;
  supplyId: number;
  animalId: number;
  requestId: BigNumber;
  job: number;
};

export interface LaborGroundsInterface extends utils.Interface {
  functions: {
    "animals()": FunctionFragment;
    "bringInAnimalsToLaborGround(uint256[],uint256[])": FunctionFragment;
    "cancelOwnershipHandover()": FunctionFragment;
    "claimCollectables(uint256[])": FunctionFragment;
    "completeOwnershipHandover(address)": FunctionFragment;
    "consumables()": FunctionFragment;
    "enterLaborGround(uint256[],uint256[],uint8[])": FunctionFragment;
    "getLaborGroundFeInfo(address)": FunctionFragment;
    "getLaborGroundInfo(uint256)": FunctionFragment;
    "getStakedTokens(address)": FunctionFragment;
    "initialize(address,address,address,address,address,address)": FunctionFragment;
    "leaveLaborGround(uint256[])": FunctionFragment;
    "neandersmol()": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "ownershipHandoverExpiresAt(address)": FunctionFragment;
    "ownershipHandoverValidFor()": FunctionFragment;
    "pits()": FunctionFragment;
    "removeAnimalsFromLaborGround(uint256[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestOwnershipHandover()": FunctionFragment;
    "setAddress(address,address,address,address,address,address)": FunctionFragment;
    "supplies()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "animals"
      | "bringInAnimalsToLaborGround"
      | "cancelOwnershipHandover"
      | "claimCollectables"
      | "completeOwnershipHandover"
      | "consumables"
      | "enterLaborGround"
      | "getLaborGroundFeInfo"
      | "getLaborGroundInfo"
      | "getStakedTokens"
      | "initialize"
      | "leaveLaborGround"
      | "neandersmol"
      | "onERC1155Received"
      | "owner"
      | "ownershipHandoverExpiresAt"
      | "ownershipHandoverValidFor"
      | "pits"
      | "removeAnimalsFromLaborGround"
      | "renounceOwnership"
      | "requestOwnershipHandover"
      | "setAddress"
      | "supplies"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "animals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bringInAnimalsToLaborGround",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOwnershipHandover",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimCollectables",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "completeOwnershipHandover",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "consumables",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enterLaborGround",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getLaborGroundFeInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLaborGroundInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakedTokens",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "leaveLaborGround",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "neandersmol",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownershipHandoverExpiresAt",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "ownershipHandoverValidFor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pits", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeAnimalsFromLaborGround",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestOwnershipHandover",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAddress",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "supplies", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "animals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bringInAnimalsToLaborGround",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOwnershipHandover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimCollectables",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeOwnershipHandover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "consumables",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enterLaborGround",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLaborGroundFeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLaborGroundInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "leaveLaborGround",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "neandersmol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownershipHandoverExpiresAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownershipHandoverValidFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAnimalsFromLaborGround",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestOwnershipHandover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "supplies", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "BringInAnimalsToLaborGround(address,uint256,uint256)": EventFragment;
    "ClaimCollectable(address,uint256)": EventFragment;
    "EnterLaborGround(address,uint256,uint256,uint8)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "LeaveLaborGround(address,uint256)": EventFragment;
    "OwnershipHandoverCanceled(address)": EventFragment;
    "OwnershipHandoverRequested(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RemoveAnimalsFromLaborGround(address,uint256,uint256)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "BringInAnimalsToLaborGround"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimCollectable"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnterLaborGround"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LeaveLaborGround"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipHandoverCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipHandoverRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RemoveAnimalsFromLaborGround"
  ): EventFragment;
}

export interface BringInAnimalsToLaborGroundEventObject {
  owner: string;
  tokenId: BigNumber;
  animalsId: BigNumber;
}
export type BringInAnimalsToLaborGroundEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  BringInAnimalsToLaborGroundEventObject
>;

export type BringInAnimalsToLaborGroundEventFilter =
  TypedEventFilter<BringInAnimalsToLaborGroundEvent>;

export interface ClaimCollectableEventObject {
  owner: string;
  tokenId: BigNumber;
}
export type ClaimCollectableEvent = TypedEvent<
  [string, BigNumber],
  ClaimCollectableEventObject
>;

export type ClaimCollectableEventFilter =
  TypedEventFilter<ClaimCollectableEvent>;

export interface EnterLaborGroundEventObject {
  owner: string;
  tokenId: BigNumber;
  supplyId: BigNumber;
  job: number;
}
export type EnterLaborGroundEvent = TypedEvent<
  [string, BigNumber, BigNumber, number],
  EnterLaborGroundEventObject
>;

export type EnterLaborGroundEventFilter =
  TypedEventFilter<EnterLaborGroundEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface LeaveLaborGroundEventObject {
  owner: string;
  tokenId: BigNumber;
}
export type LeaveLaborGroundEvent = TypedEvent<
  [string, BigNumber],
  LeaveLaborGroundEventObject
>;

export type LeaveLaborGroundEventFilter =
  TypedEventFilter<LeaveLaborGroundEvent>;

export interface OwnershipHandoverCanceledEventObject {
  pendingOwner: string;
}
export type OwnershipHandoverCanceledEvent = TypedEvent<
  [string],
  OwnershipHandoverCanceledEventObject
>;

export type OwnershipHandoverCanceledEventFilter =
  TypedEventFilter<OwnershipHandoverCanceledEvent>;

export interface OwnershipHandoverRequestedEventObject {
  pendingOwner: string;
}
export type OwnershipHandoverRequestedEvent = TypedEvent<
  [string],
  OwnershipHandoverRequestedEventObject
>;

export type OwnershipHandoverRequestedEventFilter =
  TypedEventFilter<OwnershipHandoverRequestedEvent>;

export interface OwnershipTransferredEventObject {
  oldOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RemoveAnimalsFromLaborGroundEventObject {
  owner: string;
  tokenId: BigNumber;
  animalsId: BigNumber;
}
export type RemoveAnimalsFromLaborGroundEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  RemoveAnimalsFromLaborGroundEventObject
>;

export type RemoveAnimalsFromLaborGroundEventFilter =
  TypedEventFilter<RemoveAnimalsFromLaborGroundEvent>;

export interface LaborGrounds extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LaborGroundsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    animals(overrides?: CallOverrides): Promise<[string]>;

    bringInAnimalsToLaborGround(
      _tokenId: PromiseOrValue<BigNumberish>[],
      _animalsId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelOwnershipHandover(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimCollectables(
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    completeOwnershipHandover(
      pendingOwner: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    consumables(overrides?: CallOverrides): Promise<[string]>;

    enterLaborGround(
      _tokenId: PromiseOrValue<BigNumberish>[],
      _supplyId: PromiseOrValue<BigNumberish>[],
      _job: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getLaborGroundFeInfo(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[LaborGroundFeInfoStructOutput[]]>;

    getLaborGroundInfo(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[LaborGroundStructOutput] & { lg: LaborGroundStructOutput }>;

    getStakedTokens(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    initialize(
      _pits: PromiseOrValue<string>,
      _animals: PromiseOrValue<string>,
      _supplies: PromiseOrValue<string>,
      _consumables: PromiseOrValue<string>,
      _neandersmol: PromiseOrValue<string>,
      _randomizer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    leaveLaborGround(
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    neandersmol(overrides?: CallOverrides): Promise<[string]>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string] & { result: string }>;

    ownershipHandoverExpiresAt(
      pendingOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { result: BigNumber }>;

    ownershipHandoverValidFor(overrides?: CallOverrides): Promise<[BigNumber]>;

    pits(overrides?: CallOverrides): Promise<[string]>;

    removeAnimalsFromLaborGround(
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestOwnershipHandover(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAddress(
      _pits: PromiseOrValue<string>,
      _animals: PromiseOrValue<string>,
      _supplies: PromiseOrValue<string>,
      _consumables: PromiseOrValue<string>,
      _neandersmol: PromiseOrValue<string>,
      _randomizer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supplies(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  animals(overrides?: CallOverrides): Promise<string>;

  bringInAnimalsToLaborGround(
    _tokenId: PromiseOrValue<BigNumberish>[],
    _animalsId: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelOwnershipHandover(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimCollectables(
    _tokenId: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  completeOwnershipHandover(
    pendingOwner: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  consumables(overrides?: CallOverrides): Promise<string>;

  enterLaborGround(
    _tokenId: PromiseOrValue<BigNumberish>[],
    _supplyId: PromiseOrValue<BigNumberish>[],
    _job: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getLaborGroundFeInfo(
    _owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<LaborGroundFeInfoStructOutput[]>;

  getLaborGroundInfo(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<LaborGroundStructOutput>;

  getStakedTokens(
    _owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  initialize(
    _pits: PromiseOrValue<string>,
    _animals: PromiseOrValue<string>,
    _supplies: PromiseOrValue<string>,
    _consumables: PromiseOrValue<string>,
    _neandersmol: PromiseOrValue<string>,
    _randomizer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  leaveLaborGround(
    _tokenId: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  neandersmol(overrides?: CallOverrides): Promise<string>;

  onERC1155Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BigNumberish>,
    arg4: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownershipHandoverExpiresAt(
    pendingOwner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ownershipHandoverValidFor(overrides?: CallOverrides): Promise<BigNumber>;

  pits(overrides?: CallOverrides): Promise<string>;

  removeAnimalsFromLaborGround(
    _tokenId: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestOwnershipHandover(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAddress(
    _pits: PromiseOrValue<string>,
    _animals: PromiseOrValue<string>,
    _supplies: PromiseOrValue<string>,
    _consumables: PromiseOrValue<string>,
    _neandersmol: PromiseOrValue<string>,
    _randomizer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supplies(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    animals(overrides?: CallOverrides): Promise<string>;

    bringInAnimalsToLaborGround(
      _tokenId: PromiseOrValue<BigNumberish>[],
      _animalsId: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    cancelOwnershipHandover(overrides?: CallOverrides): Promise<void>;

    claimCollectables(
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    completeOwnershipHandover(
      pendingOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    consumables(overrides?: CallOverrides): Promise<string>;

    enterLaborGround(
      _tokenId: PromiseOrValue<BigNumberish>[],
      _supplyId: PromiseOrValue<BigNumberish>[],
      _job: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    getLaborGroundFeInfo(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<LaborGroundFeInfoStructOutput[]>;

    getLaborGroundInfo(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<LaborGroundStructOutput>;

    getStakedTokens(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    initialize(
      _pits: PromiseOrValue<string>,
      _animals: PromiseOrValue<string>,
      _supplies: PromiseOrValue<string>,
      _consumables: PromiseOrValue<string>,
      _neandersmol: PromiseOrValue<string>,
      _randomizer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    leaveLaborGround(
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    neandersmol(overrides?: CallOverrides): Promise<string>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownershipHandoverExpiresAt(
      pendingOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownershipHandoverValidFor(overrides?: CallOverrides): Promise<BigNumber>;

    pits(overrides?: CallOverrides): Promise<string>;

    removeAnimalsFromLaborGround(
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requestOwnershipHandover(overrides?: CallOverrides): Promise<void>;

    setAddress(
      _pits: PromiseOrValue<string>,
      _animals: PromiseOrValue<string>,
      _supplies: PromiseOrValue<string>,
      _consumables: PromiseOrValue<string>,
      _neandersmol: PromiseOrValue<string>,
      _randomizer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supplies(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BringInAnimalsToLaborGround(address,uint256,uint256)"(
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      animalsId?: PromiseOrValue<BigNumberish> | null
    ): BringInAnimalsToLaborGroundEventFilter;
    BringInAnimalsToLaborGround(
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      animalsId?: PromiseOrValue<BigNumberish> | null
    ): BringInAnimalsToLaborGroundEventFilter;

    "ClaimCollectable(address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ClaimCollectableEventFilter;
    ClaimCollectable(
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ClaimCollectableEventFilter;

    "EnterLaborGround(address,uint256,uint256,uint8)"(
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      supplyId?: PromiseOrValue<BigNumberish> | null,
      job?: null
    ): EnterLaborGroundEventFilter;
    EnterLaborGround(
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      supplyId?: PromiseOrValue<BigNumberish> | null,
      job?: null
    ): EnterLaborGroundEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "LeaveLaborGround(address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): LeaveLaborGroundEventFilter;
    LeaveLaborGround(
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): LeaveLaborGroundEventFilter;

    "OwnershipHandoverCanceled(address)"(
      pendingOwner?: PromiseOrValue<string> | null
    ): OwnershipHandoverCanceledEventFilter;
    OwnershipHandoverCanceled(
      pendingOwner?: PromiseOrValue<string> | null
    ): OwnershipHandoverCanceledEventFilter;

    "OwnershipHandoverRequested(address)"(
      pendingOwner?: PromiseOrValue<string> | null
    ): OwnershipHandoverRequestedEventFilter;
    OwnershipHandoverRequested(
      pendingOwner?: PromiseOrValue<string> | null
    ): OwnershipHandoverRequestedEventFilter;

    "OwnershipTransferred(address,address)"(
      oldOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      oldOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RemoveAnimalsFromLaborGround(address,uint256,uint256)"(
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      animalsId?: PromiseOrValue<BigNumberish> | null
    ): RemoveAnimalsFromLaborGroundEventFilter;
    RemoveAnimalsFromLaborGround(
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      animalsId?: PromiseOrValue<BigNumberish> | null
    ): RemoveAnimalsFromLaborGroundEventFilter;
  };

  estimateGas: {
    animals(overrides?: CallOverrides): Promise<BigNumber>;

    bringInAnimalsToLaborGround(
      _tokenId: PromiseOrValue<BigNumberish>[],
      _animalsId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelOwnershipHandover(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimCollectables(
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    completeOwnershipHandover(
      pendingOwner: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    consumables(overrides?: CallOverrides): Promise<BigNumber>;

    enterLaborGround(
      _tokenId: PromiseOrValue<BigNumberish>[],
      _supplyId: PromiseOrValue<BigNumberish>[],
      _job: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getLaborGroundFeInfo(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLaborGroundInfo(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakedTokens(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _pits: PromiseOrValue<string>,
      _animals: PromiseOrValue<string>,
      _supplies: PromiseOrValue<string>,
      _consumables: PromiseOrValue<string>,
      _neandersmol: PromiseOrValue<string>,
      _randomizer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    leaveLaborGround(
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    neandersmol(overrides?: CallOverrides): Promise<BigNumber>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownershipHandoverExpiresAt(
      pendingOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownershipHandoverValidFor(overrides?: CallOverrides): Promise<BigNumber>;

    pits(overrides?: CallOverrides): Promise<BigNumber>;

    removeAnimalsFromLaborGround(
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestOwnershipHandover(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAddress(
      _pits: PromiseOrValue<string>,
      _animals: PromiseOrValue<string>,
      _supplies: PromiseOrValue<string>,
      _consumables: PromiseOrValue<string>,
      _neandersmol: PromiseOrValue<string>,
      _randomizer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supplies(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    animals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bringInAnimalsToLaborGround(
      _tokenId: PromiseOrValue<BigNumberish>[],
      _animalsId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelOwnershipHandover(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimCollectables(
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    completeOwnershipHandover(
      pendingOwner: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    consumables(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enterLaborGround(
      _tokenId: PromiseOrValue<BigNumberish>[],
      _supplyId: PromiseOrValue<BigNumberish>[],
      _job: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getLaborGroundFeInfo(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLaborGroundInfo(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakedTokens(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _pits: PromiseOrValue<string>,
      _animals: PromiseOrValue<string>,
      _supplies: PromiseOrValue<string>,
      _consumables: PromiseOrValue<string>,
      _neandersmol: PromiseOrValue<string>,
      _randomizer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    leaveLaborGround(
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    neandersmol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownershipHandoverExpiresAt(
      pendingOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownershipHandoverValidFor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pits(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeAnimalsFromLaborGround(
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestOwnershipHandover(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAddress(
      _pits: PromiseOrValue<string>,
      _animals: PromiseOrValue<string>,
      _supplies: PromiseOrValue<string>,
      _consumables: PromiseOrValue<string>,
      _neandersmol: PromiseOrValue<string>,
      _randomizer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supplies(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
