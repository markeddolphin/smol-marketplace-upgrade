/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type CavesFeInfoStruct = {
  reward: PromiseOrValue<BigNumberish>;
  stakedSmols: PromiseOrValue<BigNumberish>;
  timeLeft: PromiseOrValue<BigNumberish>;
};

export type CavesFeInfoStructOutput = [BigNumber, BigNumber, BigNumber] & {
  reward: BigNumber;
  stakedSmols: BigNumber;
  timeLeft: BigNumber;
};

export type CaveStruct = {
  owner: PromiseOrValue<string>;
  stakingTime: PromiseOrValue<BigNumberish>;
  lastRewardTimestamp: PromiseOrValue<BigNumberish>;
};

export type CaveStructOutput = [string, number, number] & {
  owner: string;
  stakingTime: number;
  lastRewardTimestamp: number;
};

export interface CavesInterface extends utils.Interface {
  functions: {
    "bones()": FunctionFragment;
    "cancelOwnershipHandover()": FunctionFragment;
    "claimCaveReward(uint256[])": FunctionFragment;
    "completeOwnershipHandover(address)": FunctionFragment;
    "enterCaves(uint256[])": FunctionFragment;
    "getCavesFeInfo(address)": FunctionFragment;
    "getCavesInfo(uint256)": FunctionFragment;
    "getCavesReward(uint256)": FunctionFragment;
    "getStakedTokens(address)": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "leaveCave(uint256[])": FunctionFragment;
    "neandersmol()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownershipHandoverExpiresAt(address)": FunctionFragment;
    "ownershipHandoverValidFor()": FunctionFragment;
    "pits()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestOwnershipHandover()": FunctionFragment;
    "setAddress(address,address,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bones"
      | "cancelOwnershipHandover"
      | "claimCaveReward"
      | "completeOwnershipHandover"
      | "enterCaves"
      | "getCavesFeInfo"
      | "getCavesInfo"
      | "getCavesReward"
      | "getStakedTokens"
      | "initialize"
      | "leaveCave"
      | "neandersmol"
      | "owner"
      | "ownershipHandoverExpiresAt"
      | "ownershipHandoverValidFor"
      | "pits"
      | "renounceOwnership"
      | "requestOwnershipHandover"
      | "setAddress"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "bones", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cancelOwnershipHandover",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimCaveReward",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "completeOwnershipHandover",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "enterCaves",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getCavesFeInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCavesInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCavesReward",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakedTokens",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "leaveCave",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "neandersmol",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownershipHandoverExpiresAt",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "ownershipHandoverValidFor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pits", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestOwnershipHandover",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAddress",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "bones", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelOwnershipHandover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimCaveReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeOwnershipHandover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "enterCaves", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCavesFeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCavesInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCavesReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "leaveCave", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "neandersmol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownershipHandoverExpiresAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownershipHandoverValidFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestOwnershipHandover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "ClaimCaveReward(address,uint256,uint256)": EventFragment;
    "EnterCaves(address,uint256,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "LeaveCave(address,uint256)": EventFragment;
    "OwnershipHandoverCanceled(address)": EventFragment;
    "OwnershipHandoverRequested(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimCaveReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnterCaves"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LeaveCave"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipHandoverCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipHandoverRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface ClaimCaveRewardEventObject {
  owner: string;
  tokenId: BigNumber;
  amount: BigNumber;
}
export type ClaimCaveRewardEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ClaimCaveRewardEventObject
>;

export type ClaimCaveRewardEventFilter = TypedEventFilter<ClaimCaveRewardEvent>;

export interface EnterCavesEventObject {
  owner: string;
  tokenId: BigNumber;
  stakeTime: BigNumber;
}
export type EnterCavesEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  EnterCavesEventObject
>;

export type EnterCavesEventFilter = TypedEventFilter<EnterCavesEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface LeaveCaveEventObject {
  owner: string;
  tokenId: BigNumber;
}
export type LeaveCaveEvent = TypedEvent<
  [string, BigNumber],
  LeaveCaveEventObject
>;

export type LeaveCaveEventFilter = TypedEventFilter<LeaveCaveEvent>;

export interface OwnershipHandoverCanceledEventObject {
  pendingOwner: string;
}
export type OwnershipHandoverCanceledEvent = TypedEvent<
  [string],
  OwnershipHandoverCanceledEventObject
>;

export type OwnershipHandoverCanceledEventFilter =
  TypedEventFilter<OwnershipHandoverCanceledEvent>;

export interface OwnershipHandoverRequestedEventObject {
  pendingOwner: string;
}
export type OwnershipHandoverRequestedEvent = TypedEvent<
  [string],
  OwnershipHandoverRequestedEventObject
>;

export type OwnershipHandoverRequestedEventFilter =
  TypedEventFilter<OwnershipHandoverRequestedEvent>;

export interface OwnershipTransferredEventObject {
  oldOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Caves extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CavesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bones(overrides?: CallOverrides): Promise<[string]>;

    cancelOwnershipHandover(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimCaveReward(
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    completeOwnershipHandover(
      pendingOwner: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    enterCaves(
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCavesFeInfo(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[CavesFeInfoStructOutput[]]>;

    getCavesInfo(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[CaveStructOutput]>;

    getCavesReward(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStakedTokens(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    initialize(
      _pits: PromiseOrValue<string>,
      _bones: PromiseOrValue<string>,
      _neandersmol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    leaveCave(
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    neandersmol(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string] & { result: string }>;

    ownershipHandoverExpiresAt(
      pendingOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { result: BigNumber }>;

    ownershipHandoverValidFor(overrides?: CallOverrides): Promise<[BigNumber]>;

    pits(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestOwnershipHandover(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAddress(
      _pits: PromiseOrValue<string>,
      _bones: PromiseOrValue<string>,
      _neandersmol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  bones(overrides?: CallOverrides): Promise<string>;

  cancelOwnershipHandover(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimCaveReward(
    _tokenId: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  completeOwnershipHandover(
    pendingOwner: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  enterCaves(
    _tokenId: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCavesFeInfo(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<CavesFeInfoStructOutput[]>;

  getCavesInfo(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<CaveStructOutput>;

  getCavesReward(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStakedTokens(
    _owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  initialize(
    _pits: PromiseOrValue<string>,
    _bones: PromiseOrValue<string>,
    _neandersmol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  leaveCave(
    _tokenId: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  neandersmol(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownershipHandoverExpiresAt(
    pendingOwner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ownershipHandoverValidFor(overrides?: CallOverrides): Promise<BigNumber>;

  pits(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestOwnershipHandover(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAddress(
    _pits: PromiseOrValue<string>,
    _bones: PromiseOrValue<string>,
    _neandersmol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bones(overrides?: CallOverrides): Promise<string>;

    cancelOwnershipHandover(overrides?: CallOverrides): Promise<void>;

    claimCaveReward(
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    completeOwnershipHandover(
      pendingOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    enterCaves(
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    getCavesFeInfo(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<CavesFeInfoStructOutput[]>;

    getCavesInfo(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<CaveStructOutput>;

    getCavesReward(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakedTokens(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    initialize(
      _pits: PromiseOrValue<string>,
      _bones: PromiseOrValue<string>,
      _neandersmol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    leaveCave(
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    neandersmol(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownershipHandoverExpiresAt(
      pendingOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownershipHandoverValidFor(overrides?: CallOverrides): Promise<BigNumber>;

    pits(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requestOwnershipHandover(overrides?: CallOverrides): Promise<void>;

    setAddress(
      _pits: PromiseOrValue<string>,
      _bones: PromiseOrValue<string>,
      _neandersmol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ClaimCaveReward(address,uint256,uint256)"(
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): ClaimCaveRewardEventFilter;
    ClaimCaveReward(
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): ClaimCaveRewardEventFilter;

    "EnterCaves(address,uint256,uint256)"(
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      stakeTime?: PromiseOrValue<BigNumberish> | null
    ): EnterCavesEventFilter;
    EnterCaves(
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      stakeTime?: PromiseOrValue<BigNumberish> | null
    ): EnterCavesEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "LeaveCave(address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): LeaveCaveEventFilter;
    LeaveCave(
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): LeaveCaveEventFilter;

    "OwnershipHandoverCanceled(address)"(
      pendingOwner?: PromiseOrValue<string> | null
    ): OwnershipHandoverCanceledEventFilter;
    OwnershipHandoverCanceled(
      pendingOwner?: PromiseOrValue<string> | null
    ): OwnershipHandoverCanceledEventFilter;

    "OwnershipHandoverRequested(address)"(
      pendingOwner?: PromiseOrValue<string> | null
    ): OwnershipHandoverRequestedEventFilter;
    OwnershipHandoverRequested(
      pendingOwner?: PromiseOrValue<string> | null
    ): OwnershipHandoverRequestedEventFilter;

    "OwnershipTransferred(address,address)"(
      oldOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      oldOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    bones(overrides?: CallOverrides): Promise<BigNumber>;

    cancelOwnershipHandover(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimCaveReward(
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    completeOwnershipHandover(
      pendingOwner: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    enterCaves(
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCavesFeInfo(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCavesInfo(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCavesReward(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakedTokens(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _pits: PromiseOrValue<string>,
      _bones: PromiseOrValue<string>,
      _neandersmol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    leaveCave(
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    neandersmol(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownershipHandoverExpiresAt(
      pendingOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownershipHandoverValidFor(overrides?: CallOverrides): Promise<BigNumber>;

    pits(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestOwnershipHandover(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAddress(
      _pits: PromiseOrValue<string>,
      _bones: PromiseOrValue<string>,
      _neandersmol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bones(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelOwnershipHandover(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimCaveReward(
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    completeOwnershipHandover(
      pendingOwner: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    enterCaves(
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCavesFeInfo(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCavesInfo(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCavesReward(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakedTokens(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _pits: PromiseOrValue<string>,
      _bones: PromiseOrValue<string>,
      _neandersmol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    leaveCave(
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    neandersmol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownershipHandoverExpiresAt(
      pendingOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownershipHandoverValidFor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pits(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestOwnershipHandover(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAddress(
      _pits: PromiseOrValue<string>,
      _bones: PromiseOrValue<string>,
      _neandersmol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
