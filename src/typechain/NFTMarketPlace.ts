/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type AcceptBidParamsStruct = {
  bidder: PromiseOrValue<string>;
  nftAddress: PromiseOrValue<string>;
  quantity: PromiseOrValue<BigNumberish>;
  tokenId: PromiseOrValue<BigNumberish>;
  listingId: PromiseOrValue<BytesLike>;
};

export type AcceptBidParamsStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber,
  string
] & {
  bidder: string;
  nftAddress: string;
  quantity: BigNumber;
  tokenId: BigNumber;
  listingId: string;
};

export type BuyItemParamsStruct = {
  listingId: PromiseOrValue<BytesLike>;
  paymentToken: PromiseOrValue<string>;
  usingEth: PromiseOrValue<boolean>;
};

export type BuyItemParamsStructOutput = [string, string, boolean] & {
  listingId: string;
  paymentToken: string;
  usingEth: boolean;
};

export type ListingParamsStruct = {
  nftAddress: PromiseOrValue<string>;
  tokenIds: PromiseOrValue<BigNumberish>[];
  quantity: PromiseOrValue<BigNumberish>;
  price: PromiseOrValue<BigNumberish>;
  expirationTime: PromiseOrValue<BigNumberish>;
  paymentToken: PromiseOrValue<string>;
};

export type ListingParamsStructOutput = [
  string,
  BigNumber[],
  BigNumber,
  BigNumber,
  BigNumber,
  string
] & {
  nftAddress: string;
  tokenIds: BigNumber[];
  quantity: BigNumber;
  price: BigNumber;
  expirationTime: BigNumber;
  paymentToken: string;
};

export type MarketOfferStruct = {
  nftAddress: PromiseOrValue<string>;
  currencyAddress: PromiseOrValue<string>;
  owner: PromiseOrValue<string>;
  tokenIds: PromiseOrValue<BigNumberish>[];
  price: PromiseOrValue<BigNumberish>;
  quantity: PromiseOrValue<BigNumberish>;
  expiryTime: PromiseOrValue<BigNumberish>;
};

export type MarketOfferStructOutput = [
  string,
  string,
  string,
  BigNumber[],
  BigNumber,
  BigNumber,
  BigNumber
] & {
  nftAddress: string;
  currencyAddress: string;
  owner: string;
  tokenIds: BigNumber[];
  price: BigNumber;
  quantity: BigNumber;
  expiryTime: BigNumber;
};

export type TokenBidStruct = {
  expiryTime: PromiseOrValue<BigNumberish>;
  paymentToken: PromiseOrValue<string>;
  bidder: PromiseOrValue<string>;
  price: PromiseOrValue<BigNumberish>;
  quantity: PromiseOrValue<BigNumberish>;
};

export type TokenBidStructOutput = [
  BigNumber,
  string,
  string,
  BigNumber,
  BigNumber
] & {
  expiryTime: BigNumber;
  paymentToken: string;
  bidder: string;
  price: BigNumber;
  quantity: BigNumber;
};

export type FeeRecipientStruct = {
  fee: PromiseOrValue<BigNumberish>;
  recipient: PromiseOrValue<string>;
};

export type FeeRecipientStructOutput = [number, string] & {
  fee: number;
  recipient: string;
};

export interface NFTMarketPlaceInterface extends utils.Interface {
  functions: {
    "BASIS_POINTS()": FunctionFragment;
    "MAX_COLLECTION_FEE()": FunctionFragment;
    "MAX_FEE()": FunctionFragment;
    "MIN_PRICE()": FunctionFragment;
    "acceptTokenBidForListing((address,address,uint64,uint64,bytes32))": FunctionFragment;
    "buyItems((bytes32,address,bool)[])": FunctionFragment;
    "cancelListing(bytes32)": FunctionFragment;
    "cancelOwnershipHandover()": FunctionFragment;
    "cancelTokenBidForListing(bytes32)": FunctionFragment;
    "collectionToCollectionOwnerFee(address)": FunctionFragment;
    "completeOwnershipHandover(address)": FunctionFragment;
    "createListing((address,uint256[],uint64,uint128,uint64,address))": FunctionFragment;
    "createTokenBidForListing(uint128,uint64,address,bytes32)": FunctionFragment;
    "fee()": FunctionFragment;
    "feeRecipient()": FunctionFragment;
    "feeWithCollectionOwner()": FunctionFragment;
    "getListings(bytes32)": FunctionFragment;
    "getTokenBid(address,bytes32)": FunctionFragment;
    "initialize(uint256,address)": FunctionFragment;
    "isListed(address,uint256)": FunctionFragment;
    "isTokenAllowed(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "ownershipHandoverExpiresAt(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestOwnershipHandover()": FunctionFragment;
    "setCollectionOwnerFee(address,(uint32,address))": FunctionFragment;
    "setFee(uint256,uint256)": FunctionFragment;
    "setFeeRecipient(address)": FunctionFragment;
    "setPaymentToken(address,bool)": FunctionFragment;
    "setTokenApprovalStatus(address,uint8)": FunctionFragment;
    "setWeth(address)": FunctionFragment;
    "tokenApprovals(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateListing((address,uint256[],uint64,uint128,uint64,address),bytes32)": FunctionFragment;
    "weth()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BASIS_POINTS"
      | "MAX_COLLECTION_FEE"
      | "MAX_FEE"
      | "MIN_PRICE"
      | "acceptTokenBidForListing"
      | "buyItems"
      | "cancelListing"
      | "cancelOwnershipHandover"
      | "cancelTokenBidForListing"
      | "collectionToCollectionOwnerFee"
      | "completeOwnershipHandover"
      | "createListing"
      | "createTokenBidForListing"
      | "fee"
      | "feeRecipient"
      | "feeWithCollectionOwner"
      | "getListings"
      | "getTokenBid"
      | "initialize"
      | "isListed"
      | "isTokenAllowed"
      | "owner"
      | "ownershipHandoverExpiresAt"
      | "renounceOwnership"
      | "requestOwnershipHandover"
      | "setCollectionOwnerFee"
      | "setFee"
      | "setFeeRecipient"
      | "setPaymentToken"
      | "setTokenApprovalStatus"
      | "setWeth"
      | "tokenApprovals"
      | "transferOwnership"
      | "updateListing"
      | "weth"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BASIS_POINTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_COLLECTION_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MAX_FEE", values?: undefined): string;
  encodeFunctionData(functionFragment: "MIN_PRICE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "acceptTokenBidForListing",
    values: [AcceptBidParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "buyItems",
    values: [BuyItemParamsStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelListing",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOwnershipHandover",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelTokenBidForListing",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "collectionToCollectionOwnerFee",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "completeOwnershipHandover",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createListing",
    values: [ListingParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createTokenBidForListing",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeWithCollectionOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getListings",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenBid",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isListed",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenAllowed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownershipHandoverExpiresAt",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestOwnershipHandover",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCollectionOwnerFee",
    values: [PromiseOrValue<string>, FeeRecipientStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeRecipient",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaymentToken",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenApprovalStatus",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWeth",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenApprovals",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateListing",
    values: [ListingParamsStruct, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "BASIS_POINTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_COLLECTION_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_FEE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MIN_PRICE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptTokenBidForListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyItems", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOwnershipHandover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelTokenBidForListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectionToCollectionOwnerFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeOwnershipHandover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTokenBidForListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeWithCollectionOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isListed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTokenAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownershipHandoverExpiresAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestOwnershipHandover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollectionOwnerFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenApprovalStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setWeth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenApprovals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;

  events: {
    "BidAccepted(address,address,bytes32,address,uint64,uint256,address)": EventFragment;
    "Initialized(uint64)": EventFragment;
    "ItemCancelled(address,bytes32)": EventFragment;
    "ItemListed(address,bytes32,address,uint256[],uint64,uint128,uint64,address)": EventFragment;
    "ItemSold(address,address,address,bytes32,uint256[],uint64,uint128,address)": EventFragment;
    "OwnershipHandoverCanceled(address)": EventFragment;
    "OwnershipHandoverRequested(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TokenApprovalStatusUpdated(address,uint8)": EventFragment;
    "TokenBidCancelled(address,bytes32)": EventFragment;
    "TokenBidCreatedOrUpdated(address,bytes32,uint128,uint64,address)": EventFragment;
    "UpdateCollectionOwnerFee(address,address,uint256)": EventFragment;
    "UpdateFee(uint256)": EventFragment;
    "UpdateFeeRecipient(address)": EventFragment;
    "UpdateFeeWithCollectionOwner(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BidAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemListed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemSold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipHandoverCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipHandoverRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenApprovalStatusUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenBidCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenBidCreatedOrUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateCollectionOwnerFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateFeeRecipient"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdateFeeWithCollectionOwner"
  ): EventFragment;
}

export interface BidAcceptedEventObject {
  seller: string;
  bidder: string;
  listingId: string;
  nftAddress: string;
  quantity: BigNumber;
  pricePerItem: BigNumber;
  paymentToken: string;
}
export type BidAcceptedEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber, string],
  BidAcceptedEventObject
>;

export type BidAcceptedEventFilter = TypedEventFilter<BidAcceptedEvent>;

export interface InitializedEventObject {
  version: BigNumber;
}
export type InitializedEvent = TypedEvent<[BigNumber], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface ItemCancelledEventObject {
  seller: string;
  listingId: string;
}
export type ItemCancelledEvent = TypedEvent<
  [string, string],
  ItemCancelledEventObject
>;

export type ItemCancelledEventFilter = TypedEventFilter<ItemCancelledEvent>;

export interface ItemListedEventObject {
  seller: string;
  listingId: string;
  nftAddress: string;
  tokenIds: BigNumber[];
  quantity: BigNumber;
  pricePerItem: BigNumber;
  expirationTime: BigNumber;
  paymentToken: string;
}
export type ItemListedEvent = TypedEvent<
  [
    string,
    string,
    string,
    BigNumber[],
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ],
  ItemListedEventObject
>;

export type ItemListedEventFilter = TypedEventFilter<ItemListedEvent>;

export interface ItemSoldEventObject {
  seller: string;
  buyer: string;
  nftAddress: string;
  listingId: string;
  tokenIds: BigNumber[];
  quantity: BigNumber;
  pricePerItem: BigNumber;
  paymentToken: string;
}
export type ItemSoldEvent = TypedEvent<
  [string, string, string, string, BigNumber[], BigNumber, BigNumber, string],
  ItemSoldEventObject
>;

export type ItemSoldEventFilter = TypedEventFilter<ItemSoldEvent>;

export interface OwnershipHandoverCanceledEventObject {
  pendingOwner: string;
}
export type OwnershipHandoverCanceledEvent = TypedEvent<
  [string],
  OwnershipHandoverCanceledEventObject
>;

export type OwnershipHandoverCanceledEventFilter =
  TypedEventFilter<OwnershipHandoverCanceledEvent>;

export interface OwnershipHandoverRequestedEventObject {
  pendingOwner: string;
}
export type OwnershipHandoverRequestedEvent = TypedEvent<
  [string],
  OwnershipHandoverRequestedEventObject
>;

export type OwnershipHandoverRequestedEventFilter =
  TypedEventFilter<OwnershipHandoverRequestedEvent>;

export interface OwnershipTransferredEventObject {
  oldOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TokenApprovalStatusUpdatedEventObject {
  nft: string;
  status: number;
}
export type TokenApprovalStatusUpdatedEvent = TypedEvent<
  [string, number],
  TokenApprovalStatusUpdatedEventObject
>;

export type TokenApprovalStatusUpdatedEventFilter =
  TypedEventFilter<TokenApprovalStatusUpdatedEvent>;

export interface TokenBidCancelledEventObject {
  bidder: string;
  listingId: string;
}
export type TokenBidCancelledEvent = TypedEvent<
  [string, string],
  TokenBidCancelledEventObject
>;

export type TokenBidCancelledEventFilter =
  TypedEventFilter<TokenBidCancelledEvent>;

export interface TokenBidCreatedOrUpdatedEventObject {
  bidder: string;
  listingId: string;
  pricePerItem: BigNumber;
  expirationTime: BigNumber;
  paymentToken: string;
}
export type TokenBidCreatedOrUpdatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, string],
  TokenBidCreatedOrUpdatedEventObject
>;

export type TokenBidCreatedOrUpdatedEventFilter =
  TypedEventFilter<TokenBidCreatedOrUpdatedEvent>;

export interface UpdateCollectionOwnerFeeEventObject {
  _collection: string;
  _recipient: string;
  _fee: BigNumber;
}
export type UpdateCollectionOwnerFeeEvent = TypedEvent<
  [string, string, BigNumber],
  UpdateCollectionOwnerFeeEventObject
>;

export type UpdateCollectionOwnerFeeEventFilter =
  TypedEventFilter<UpdateCollectionOwnerFeeEvent>;

export interface UpdateFeeEventObject {
  fee: BigNumber;
}
export type UpdateFeeEvent = TypedEvent<[BigNumber], UpdateFeeEventObject>;

export type UpdateFeeEventFilter = TypedEventFilter<UpdateFeeEvent>;

export interface UpdateFeeRecipientEventObject {
  feeRecipient: string;
}
export type UpdateFeeRecipientEvent = TypedEvent<
  [string],
  UpdateFeeRecipientEventObject
>;

export type UpdateFeeRecipientEventFilter =
  TypedEventFilter<UpdateFeeRecipientEvent>;

export interface UpdateFeeWithCollectionOwnerEventObject {
  fee: BigNumber;
}
export type UpdateFeeWithCollectionOwnerEvent = TypedEvent<
  [BigNumber],
  UpdateFeeWithCollectionOwnerEventObject
>;

export type UpdateFeeWithCollectionOwnerEventFilter =
  TypedEventFilter<UpdateFeeWithCollectionOwnerEvent>;

export interface NFTMarketPlace extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NFTMarketPlaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BASIS_POINTS(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_COLLECTION_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_PRICE(overrides?: CallOverrides): Promise<[BigNumber]>;

    acceptTokenBidForListing(
      _acceptBidParams: AcceptBidParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyItems(
      _buyItemParams: BuyItemParamsStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelListing(
      _listingId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelOwnershipHandover(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelTokenBidForListing(
      _listingId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collectionToCollectionOwnerFee(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number, string] & { fee: number; recipient: string }>;

    completeOwnershipHandover(
      pendingOwner: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createListing(
      _listingParams: ListingParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createTokenBidForListing(
      _price: PromiseOrValue<BigNumberish>,
      _expirationTime: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _listingId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeRecipient(overrides?: CallOverrides): Promise<[string]>;

    feeWithCollectionOwner(overrides?: CallOverrides): Promise<[BigNumber]>;

    getListings(
      _listingId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[MarketOfferStructOutput]>;

    getTokenBid(
      _bidder: PromiseOrValue<string>,
      _listingId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[TokenBidStructOutput]>;

    initialize(
      _initialFee: PromiseOrValue<BigNumberish>,
      _initialFeeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isListed(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTokenAllowed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string] & { result: string }>;

    ownershipHandoverExpiresAt(
      pendingOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { result: BigNumber }>;

    renounceOwnership(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestOwnershipHandover(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCollectionOwnerFee(
      _collectionAddress: PromiseOrValue<string>,
      _collectionOwnerFee: FeeRecipientStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFee(
      _newFee: PromiseOrValue<BigNumberish>,
      _newFeeWithCollectionOwner: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeRecipient(
      _newFeeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPaymentToken(
      _paymentToken: PromiseOrValue<string>,
      _state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTokenApprovalStatus(
      _nft: PromiseOrValue<string>,
      _status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWeth(
      _wethAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenApprovals(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateListing(
      _listingParams: ListingParamsStruct,
      _listingId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    weth(overrides?: CallOverrides): Promise<[string]>;
  };

  BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_COLLECTION_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

  acceptTokenBidForListing(
    _acceptBidParams: AcceptBidParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyItems(
    _buyItemParams: BuyItemParamsStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelListing(
    _listingId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelOwnershipHandover(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelTokenBidForListing(
    _listingId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collectionToCollectionOwnerFee(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[number, string] & { fee: number; recipient: string }>;

  completeOwnershipHandover(
    pendingOwner: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createListing(
    _listingParams: ListingParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createTokenBidForListing(
    _price: PromiseOrValue<BigNumberish>,
    _expirationTime: PromiseOrValue<BigNumberish>,
    _paymentToken: PromiseOrValue<string>,
    _listingId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  feeRecipient(overrides?: CallOverrides): Promise<string>;

  feeWithCollectionOwner(overrides?: CallOverrides): Promise<BigNumber>;

  getListings(
    _listingId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<MarketOfferStructOutput>;

  getTokenBid(
    _bidder: PromiseOrValue<string>,
    _listingId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<TokenBidStructOutput>;

  initialize(
    _initialFee: PromiseOrValue<BigNumberish>,
    _initialFeeRecipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isListed(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTokenAllowed(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownershipHandoverExpiresAt(
    pendingOwner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestOwnershipHandover(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCollectionOwnerFee(
    _collectionAddress: PromiseOrValue<string>,
    _collectionOwnerFee: FeeRecipientStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFee(
    _newFee: PromiseOrValue<BigNumberish>,
    _newFeeWithCollectionOwner: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeRecipient(
    _newFeeRecipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPaymentToken(
    _paymentToken: PromiseOrValue<string>,
    _state: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTokenApprovalStatus(
    _nft: PromiseOrValue<string>,
    _status: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWeth(
    _wethAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenApprovals(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateListing(
    _listingParams: ListingParamsStruct,
    _listingId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  weth(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_COLLECTION_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    acceptTokenBidForListing(
      _acceptBidParams: AcceptBidParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    buyItems(
      _buyItemParams: BuyItemParamsStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    cancelListing(
      _listingId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelOwnershipHandover(overrides?: CallOverrides): Promise<void>;

    cancelTokenBidForListing(
      _listingId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    collectionToCollectionOwnerFee(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number, string] & { fee: number; recipient: string }>;

    completeOwnershipHandover(
      pendingOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createListing(
      _listingParams: ListingParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    createTokenBidForListing(
      _price: PromiseOrValue<BigNumberish>,
      _expirationTime: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _listingId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    feeRecipient(overrides?: CallOverrides): Promise<string>;

    feeWithCollectionOwner(overrides?: CallOverrides): Promise<BigNumber>;

    getListings(
      _listingId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<MarketOfferStructOutput>;

    getTokenBid(
      _bidder: PromiseOrValue<string>,
      _listingId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<TokenBidStructOutput>;

    initialize(
      _initialFee: PromiseOrValue<BigNumberish>,
      _initialFeeRecipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isListed(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTokenAllowed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownershipHandoverExpiresAt(
      pendingOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requestOwnershipHandover(overrides?: CallOverrides): Promise<void>;

    setCollectionOwnerFee(
      _collectionAddress: PromiseOrValue<string>,
      _collectionOwnerFee: FeeRecipientStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setFee(
      _newFee: PromiseOrValue<BigNumberish>,
      _newFeeWithCollectionOwner: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeRecipient(
      _newFeeRecipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPaymentToken(
      _paymentToken: PromiseOrValue<string>,
      _state: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenApprovalStatus(
      _nft: PromiseOrValue<string>,
      _status: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWeth(
      _wethAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenApprovals(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateListing(
      _listingParams: ListingParamsStruct,
      _listingId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    weth(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "BidAccepted(address,address,bytes32,address,uint64,uint256,address)"(
      seller?: null,
      bidder?: null,
      listingId?: null,
      nftAddress?: null,
      quantity?: null,
      pricePerItem?: null,
      paymentToken?: null
    ): BidAcceptedEventFilter;
    BidAccepted(
      seller?: null,
      bidder?: null,
      listingId?: null,
      nftAddress?: null,
      quantity?: null,
      pricePerItem?: null,
      paymentToken?: null
    ): BidAcceptedEventFilter;

    "Initialized(uint64)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "ItemCancelled(address,bytes32)"(
      seller?: PromiseOrValue<string> | null,
      listingId?: PromiseOrValue<BytesLike> | null
    ): ItemCancelledEventFilter;
    ItemCancelled(
      seller?: PromiseOrValue<string> | null,
      listingId?: PromiseOrValue<BytesLike> | null
    ): ItemCancelledEventFilter;

    "ItemListed(address,bytes32,address,uint256[],uint64,uint128,uint64,address)"(
      seller?: null,
      listingId?: null,
      nftAddress?: null,
      tokenIds?: null,
      quantity?: null,
      pricePerItem?: null,
      expirationTime?: null,
      paymentToken?: null
    ): ItemListedEventFilter;
    ItemListed(
      seller?: null,
      listingId?: null,
      nftAddress?: null,
      tokenIds?: null,
      quantity?: null,
      pricePerItem?: null,
      expirationTime?: null,
      paymentToken?: null
    ): ItemListedEventFilter;

    "ItemSold(address,address,address,bytes32,uint256[],uint64,uint128,address)"(
      seller?: null,
      buyer?: null,
      nftAddress?: null,
      listingId?: null,
      tokenIds?: null,
      quantity?: null,
      pricePerItem?: null,
      paymentToken?: null
    ): ItemSoldEventFilter;
    ItemSold(
      seller?: null,
      buyer?: null,
      nftAddress?: null,
      listingId?: null,
      tokenIds?: null,
      quantity?: null,
      pricePerItem?: null,
      paymentToken?: null
    ): ItemSoldEventFilter;

    "OwnershipHandoverCanceled(address)"(
      pendingOwner?: PromiseOrValue<string> | null
    ): OwnershipHandoverCanceledEventFilter;
    OwnershipHandoverCanceled(
      pendingOwner?: PromiseOrValue<string> | null
    ): OwnershipHandoverCanceledEventFilter;

    "OwnershipHandoverRequested(address)"(
      pendingOwner?: PromiseOrValue<string> | null
    ): OwnershipHandoverRequestedEventFilter;
    OwnershipHandoverRequested(
      pendingOwner?: PromiseOrValue<string> | null
    ): OwnershipHandoverRequestedEventFilter;

    "OwnershipTransferred(address,address)"(
      oldOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      oldOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "TokenApprovalStatusUpdated(address,uint8)"(
      nft?: null,
      status?: null
    ): TokenApprovalStatusUpdatedEventFilter;
    TokenApprovalStatusUpdated(
      nft?: null,
      status?: null
    ): TokenApprovalStatusUpdatedEventFilter;

    "TokenBidCancelled(address,bytes32)"(
      bidder?: null,
      listingId?: null
    ): TokenBidCancelledEventFilter;
    TokenBidCancelled(
      bidder?: null,
      listingId?: null
    ): TokenBidCancelledEventFilter;

    "TokenBidCreatedOrUpdated(address,bytes32,uint128,uint64,address)"(
      bidder?: null,
      listingId?: null,
      pricePerItem?: null,
      expirationTime?: null,
      paymentToken?: null
    ): TokenBidCreatedOrUpdatedEventFilter;
    TokenBidCreatedOrUpdated(
      bidder?: null,
      listingId?: null,
      pricePerItem?: null,
      expirationTime?: null,
      paymentToken?: null
    ): TokenBidCreatedOrUpdatedEventFilter;

    "UpdateCollectionOwnerFee(address,address,uint256)"(
      _collection?: null,
      _recipient?: null,
      _fee?: null
    ): UpdateCollectionOwnerFeeEventFilter;
    UpdateCollectionOwnerFee(
      _collection?: null,
      _recipient?: null,
      _fee?: null
    ): UpdateCollectionOwnerFeeEventFilter;

    "UpdateFee(uint256)"(fee?: null): UpdateFeeEventFilter;
    UpdateFee(fee?: null): UpdateFeeEventFilter;

    "UpdateFeeRecipient(address)"(
      feeRecipient?: null
    ): UpdateFeeRecipientEventFilter;
    UpdateFeeRecipient(feeRecipient?: null): UpdateFeeRecipientEventFilter;

    "UpdateFeeWithCollectionOwner(uint256)"(
      fee?: null
    ): UpdateFeeWithCollectionOwnerEventFilter;
    UpdateFeeWithCollectionOwner(
      fee?: null
    ): UpdateFeeWithCollectionOwnerEventFilter;
  };

  estimateGas: {
    BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_COLLECTION_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    acceptTokenBidForListing(
      _acceptBidParams: AcceptBidParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyItems(
      _buyItemParams: BuyItemParamsStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelListing(
      _listingId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelOwnershipHandover(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelTokenBidForListing(
      _listingId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collectionToCollectionOwnerFee(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    completeOwnershipHandover(
      pendingOwner: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createListing(
      _listingParams: ListingParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createTokenBidForListing(
      _price: PromiseOrValue<BigNumberish>,
      _expirationTime: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _listingId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    feeRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    feeWithCollectionOwner(overrides?: CallOverrides): Promise<BigNumber>;

    getListings(
      _listingId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenBid(
      _bidder: PromiseOrValue<string>,
      _listingId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _initialFee: PromiseOrValue<BigNumberish>,
      _initialFeeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isListed(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTokenAllowed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownershipHandoverExpiresAt(
      pendingOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestOwnershipHandover(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCollectionOwnerFee(
      _collectionAddress: PromiseOrValue<string>,
      _collectionOwnerFee: FeeRecipientStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFee(
      _newFee: PromiseOrValue<BigNumberish>,
      _newFeeWithCollectionOwner: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeRecipient(
      _newFeeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPaymentToken(
      _paymentToken: PromiseOrValue<string>,
      _state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTokenApprovalStatus(
      _nft: PromiseOrValue<string>,
      _status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWeth(
      _wethAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenApprovals(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateListing(
      _listingParams: ListingParamsStruct,
      _listingId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BASIS_POINTS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_COLLECTION_FEE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_PRICE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptTokenBidForListing(
      _acceptBidParams: AcceptBidParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyItems(
      _buyItemParams: BuyItemParamsStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelListing(
      _listingId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelOwnershipHandover(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelTokenBidForListing(
      _listingId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collectionToCollectionOwnerFee(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    completeOwnershipHandover(
      pendingOwner: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createListing(
      _listingParams: ListingParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createTokenBidForListing(
      _price: PromiseOrValue<BigNumberish>,
      _expirationTime: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _listingId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeWithCollectionOwner(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getListings(
      _listingId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenBid(
      _bidder: PromiseOrValue<string>,
      _listingId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _initialFee: PromiseOrValue<BigNumberish>,
      _initialFeeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isListed(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTokenAllowed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownershipHandoverExpiresAt(
      pendingOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestOwnershipHandover(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCollectionOwnerFee(
      _collectionAddress: PromiseOrValue<string>,
      _collectionOwnerFee: FeeRecipientStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFee(
      _newFee: PromiseOrValue<BigNumberish>,
      _newFeeWithCollectionOwner: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeRecipient(
      _newFeeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPaymentToken(
      _paymentToken: PromiseOrValue<string>,
      _state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTokenApprovalStatus(
      _nft: PromiseOrValue<string>,
      _status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWeth(
      _wethAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenApprovals(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateListing(
      _listingParams: ListingParamsStruct,
      _listingId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
