/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type BonesFeInfoStruct = {
  balance: PromiseOrValue<BigNumberish>;
  timeStaked: PromiseOrValue<BigNumberish>;
};

export type BonesFeInfoStructOutput = [BigNumber, BigNumber] & {
  balance: BigNumber;
  timeStaked: BigNumber;
};

export type DevGroundFeInfoStruct = {
  timeLeft: PromiseOrValue<BigNumberish>;
  daysStaked: PromiseOrValue<BigNumberish>;
  stakedSmols: PromiseOrValue<BigNumberish>;
  skillLevel: PromiseOrValue<BigNumberish>;
  bonesAccured: PromiseOrValue<BigNumberish>;
  totalBonesStaked: PromiseOrValue<BigNumberish>;
  ground: PromiseOrValue<BigNumberish>;
};

export type DevGroundFeInfoStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  number
] & {
  timeLeft: BigNumber;
  daysStaked: BigNumber;
  stakedSmols: BigNumber;
  skillLevel: BigNumber;
  bonesAccured: BigNumber;
  totalBonesStaked: BigNumber;
  ground: number;
};

export type DevelopmentGroundStruct = {
  owner: PromiseOrValue<string>;
  lockPeriod: PromiseOrValue<BigNumberish>;
  amountPosition: PromiseOrValue<BigNumberish>;
  entryTime: PromiseOrValue<BigNumberish>;
  lastRewardTime: PromiseOrValue<BigNumberish>;
  bonesStaked: PromiseOrValue<BigNumberish>;
  currentPitsLockPeriod: PromiseOrValue<BigNumberish>;
  ground: PromiseOrValue<BigNumberish>;
};

export type DevelopmentGroundStructOutput = [
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  number
] & {
  owner: string;
  lockPeriod: BigNumber;
  amountPosition: BigNumber;
  entryTime: BigNumber;
  lastRewardTime: BigNumber;
  bonesStaked: BigNumber;
  currentPitsLockPeriod: BigNumber;
  ground: number;
};

export interface DevelopmentGroundsInterface extends utils.Interface {
  functions: {
    "bones()": FunctionFragment;
    "bonesToTime(uint256)": FunctionFragment;
    "calculateBones(address)": FunctionFragment;
    "cancelOwnershipHandover()": FunctionFragment;
    "claimDevelopmentGroundBonesReward(uint256[],bool[])": FunctionFragment;
    "completeOwnershipHandover(address)": FunctionFragment;
    "enterDevelopmentGround(uint256[],uint256[],uint8[])": FunctionFragment;
    "getDevGroundFeInfo(address)": FunctionFragment;
    "getDevelopmentGroundBonesReward(uint256)": FunctionFragment;
    "getDevelopmentGroundInfo(uint256)": FunctionFragment;
    "getPrimarySkill(uint256)": FunctionFragment;
    "getStakedTokens(address)": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "leaveDevelopmentGround(uint256[])": FunctionFragment;
    "neandersmol()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownershipHandoverExpiresAt(address)": FunctionFragment;
    "ownershipHandoverValidFor()": FunctionFragment;
    "pits()": FunctionFragment;
    "removeBones(uint256[],bool[])": FunctionFragment;
    "removeSingleBones(uint256,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestOwnershipHandover()": FunctionFragment;
    "setAddress(address,address,address)": FunctionFragment;
    "stakeBonesInDevelopmentGround(uint256[],uint256[])": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bones"
      | "bonesToTime"
      | "calculateBones"
      | "cancelOwnershipHandover"
      | "claimDevelopmentGroundBonesReward"
      | "completeOwnershipHandover"
      | "enterDevelopmentGround"
      | "getDevGroundFeInfo"
      | "getDevelopmentGroundBonesReward"
      | "getDevelopmentGroundInfo"
      | "getPrimarySkill"
      | "getStakedTokens"
      | "initialize"
      | "leaveDevelopmentGround"
      | "neandersmol"
      | "owner"
      | "ownershipHandoverExpiresAt"
      | "ownershipHandoverValidFor"
      | "pits"
      | "removeBones"
      | "removeSingleBones"
      | "renounceOwnership"
      | "requestOwnershipHandover"
      | "setAddress"
      | "stakeBonesInDevelopmentGround"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "bones", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bonesToTime",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateBones",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOwnershipHandover",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimDevelopmentGroundBonesReward",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<boolean>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "completeOwnershipHandover",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "enterDevelopmentGround",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getDevGroundFeInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDevelopmentGroundBonesReward",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDevelopmentGroundInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrimarySkill",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakedTokens",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "leaveDevelopmentGround",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "neandersmol",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownershipHandoverExpiresAt",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "ownershipHandoverValidFor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pits", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeBones",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<boolean>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSingleBones",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestOwnershipHandover",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAddress",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeBonesInDevelopmentGround",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "bones", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bonesToTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateBones",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOwnershipHandover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimDevelopmentGroundBonesReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeOwnershipHandover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enterDevelopmentGround",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDevGroundFeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDevelopmentGroundBonesReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDevelopmentGroundInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPrimarySkill",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "leaveDevelopmentGround",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "neandersmol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownershipHandoverExpiresAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownershipHandoverValidFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeBones",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSingleBones",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestOwnershipHandover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeBonesInDevelopmentGround",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "ClaimDevelopmentGroundBonesReward(address,uint256,bool)": EventFragment;
    "EnterDevelopmentGround(address,uint256,uint256,uint256,uint8)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "LeaveDevelopmentGround(address,uint256)": EventFragment;
    "OwnershipHandoverCanceled(address)": EventFragment;
    "OwnershipHandoverRequested(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RemoveBones(address,uint256,uint256)": EventFragment;
    "StakeBonesInDevelopmentGround(address,uint256,uint256)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "ClaimDevelopmentGroundBonesReward"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnterDevelopmentGround"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LeaveDevelopmentGround"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipHandoverCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipHandoverRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveBones"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "StakeBonesInDevelopmentGround"
  ): EventFragment;
}

export interface ClaimDevelopmentGroundBonesRewardEventObject {
  owner: string;
  tokenId: BigNumber;
  stake: boolean;
}
export type ClaimDevelopmentGroundBonesRewardEvent = TypedEvent<
  [string, BigNumber, boolean],
  ClaimDevelopmentGroundBonesRewardEventObject
>;

export type ClaimDevelopmentGroundBonesRewardEventFilter =
  TypedEventFilter<ClaimDevelopmentGroundBonesRewardEvent>;

export interface EnterDevelopmentGroundEventObject {
  owner: string;
  tokenId: BigNumber;
  lockTime: BigNumber;
  entryTime: BigNumber;
  ground: number;
}
export type EnterDevelopmentGroundEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, number],
  EnterDevelopmentGroundEventObject
>;

export type EnterDevelopmentGroundEventFilter =
  TypedEventFilter<EnterDevelopmentGroundEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface LeaveDevelopmentGroundEventObject {
  owner: string;
  tokenId: BigNumber;
}
export type LeaveDevelopmentGroundEvent = TypedEvent<
  [string, BigNumber],
  LeaveDevelopmentGroundEventObject
>;

export type LeaveDevelopmentGroundEventFilter =
  TypedEventFilter<LeaveDevelopmentGroundEvent>;

export interface OwnershipHandoverCanceledEventObject {
  pendingOwner: string;
}
export type OwnershipHandoverCanceledEvent = TypedEvent<
  [string],
  OwnershipHandoverCanceledEventObject
>;

export type OwnershipHandoverCanceledEventFilter =
  TypedEventFilter<OwnershipHandoverCanceledEvent>;

export interface OwnershipHandoverRequestedEventObject {
  pendingOwner: string;
}
export type OwnershipHandoverRequestedEvent = TypedEvent<
  [string],
  OwnershipHandoverRequestedEventObject
>;

export type OwnershipHandoverRequestedEventFilter =
  TypedEventFilter<OwnershipHandoverRequestedEvent>;

export interface OwnershipTransferredEventObject {
  oldOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RemoveBonesEventObject {
  owner: string;
  tokenId: BigNumber;
  amount: BigNumber;
}
export type RemoveBonesEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  RemoveBonesEventObject
>;

export type RemoveBonesEventFilter = TypedEventFilter<RemoveBonesEvent>;

export interface StakeBonesInDevelopmentGroundEventObject {
  owner: string;
  amount: BigNumber;
  tokenId: BigNumber;
}
export type StakeBonesInDevelopmentGroundEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  StakeBonesInDevelopmentGroundEventObject
>;

export type StakeBonesInDevelopmentGroundEventFilter =
  TypedEventFilter<StakeBonesInDevelopmentGroundEvent>;

export interface DevelopmentGrounds extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DevelopmentGroundsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bones(overrides?: CallOverrides): Promise<[string]>;

    bonesToTime(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BonesFeInfoStructOutput[]]>;

    calculateBones(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    cancelOwnershipHandover(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimDevelopmentGroundBonesReward(
      _tokenId: PromiseOrValue<BigNumberish>[],
      _stake: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    completeOwnershipHandover(
      pendingOwner: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    enterDevelopmentGround(
      _tokenId: PromiseOrValue<BigNumberish>[],
      _lockTime: PromiseOrValue<BigNumberish>[],
      _ground: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getDevGroundFeInfo(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[DevGroundFeInfoStructOutput[]]>;

    getDevelopmentGroundBonesReward(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDevelopmentGroundInfo(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[DevelopmentGroundStructOutput]>;

    getPrimarySkill(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStakedTokens(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    initialize(
      _pits: PromiseOrValue<string>,
      _neandersmol: PromiseOrValue<string>,
      _bones: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    leaveDevelopmentGround(
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    neandersmol(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string] & { result: string }>;

    ownershipHandoverExpiresAt(
      pendingOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { result: BigNumber }>;

    ownershipHandoverValidFor(overrides?: CallOverrides): Promise<[BigNumber]>;

    pits(overrides?: CallOverrides): Promise<[string]>;

    removeBones(
      _tokenId: PromiseOrValue<BigNumberish>[],
      _all: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeSingleBones(
      _tokenId: PromiseOrValue<BigNumberish>,
      _pos: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestOwnershipHandover(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAddress(
      _pits: PromiseOrValue<string>,
      _neandersmol: PromiseOrValue<string>,
      _bones: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakeBonesInDevelopmentGround(
      _amount: PromiseOrValue<BigNumberish>[],
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  bones(overrides?: CallOverrides): Promise<string>;

  bonesToTime(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BonesFeInfoStructOutput[]>;

  calculateBones(
    _owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  cancelOwnershipHandover(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimDevelopmentGroundBonesReward(
    _tokenId: PromiseOrValue<BigNumberish>[],
    _stake: PromiseOrValue<boolean>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  completeOwnershipHandover(
    pendingOwner: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  enterDevelopmentGround(
    _tokenId: PromiseOrValue<BigNumberish>[],
    _lockTime: PromiseOrValue<BigNumberish>[],
    _ground: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getDevGroundFeInfo(
    _owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<DevGroundFeInfoStructOutput[]>;

  getDevelopmentGroundBonesReward(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDevelopmentGroundInfo(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<DevelopmentGroundStructOutput>;

  getPrimarySkill(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStakedTokens(
    _owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  initialize(
    _pits: PromiseOrValue<string>,
    _neandersmol: PromiseOrValue<string>,
    _bones: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  leaveDevelopmentGround(
    _tokenId: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  neandersmol(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownershipHandoverExpiresAt(
    pendingOwner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ownershipHandoverValidFor(overrides?: CallOverrides): Promise<BigNumber>;

  pits(overrides?: CallOverrides): Promise<string>;

  removeBones(
    _tokenId: PromiseOrValue<BigNumberish>[],
    _all: PromiseOrValue<boolean>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeSingleBones(
    _tokenId: PromiseOrValue<BigNumberish>,
    _pos: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestOwnershipHandover(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAddress(
    _pits: PromiseOrValue<string>,
    _neandersmol: PromiseOrValue<string>,
    _bones: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakeBonesInDevelopmentGround(
    _amount: PromiseOrValue<BigNumberish>[],
    _tokenId: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bones(overrides?: CallOverrides): Promise<string>;

    bonesToTime(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BonesFeInfoStructOutput[]>;

    calculateBones(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    cancelOwnershipHandover(overrides?: CallOverrides): Promise<void>;

    claimDevelopmentGroundBonesReward(
      _tokenId: PromiseOrValue<BigNumberish>[],
      _stake: PromiseOrValue<boolean>[],
      overrides?: CallOverrides
    ): Promise<void>;

    completeOwnershipHandover(
      pendingOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    enterDevelopmentGround(
      _tokenId: PromiseOrValue<BigNumberish>[],
      _lockTime: PromiseOrValue<BigNumberish>[],
      _ground: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    getDevGroundFeInfo(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<DevGroundFeInfoStructOutput[]>;

    getDevelopmentGroundBonesReward(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDevelopmentGroundInfo(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<DevelopmentGroundStructOutput>;

    getPrimarySkill(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakedTokens(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    initialize(
      _pits: PromiseOrValue<string>,
      _neandersmol: PromiseOrValue<string>,
      _bones: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    leaveDevelopmentGround(
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    neandersmol(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownershipHandoverExpiresAt(
      pendingOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownershipHandoverValidFor(overrides?: CallOverrides): Promise<BigNumber>;

    pits(overrides?: CallOverrides): Promise<string>;

    removeBones(
      _tokenId: PromiseOrValue<BigNumberish>[],
      _all: PromiseOrValue<boolean>[],
      overrides?: CallOverrides
    ): Promise<void>;

    removeSingleBones(
      _tokenId: PromiseOrValue<BigNumberish>,
      _pos: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requestOwnershipHandover(overrides?: CallOverrides): Promise<void>;

    setAddress(
      _pits: PromiseOrValue<string>,
      _neandersmol: PromiseOrValue<string>,
      _bones: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeBonesInDevelopmentGround(
      _amount: PromiseOrValue<BigNumberish>[],
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ClaimDevelopmentGroundBonesReward(address,uint256,bool)"(
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      stake?: PromiseOrValue<boolean> | null
    ): ClaimDevelopmentGroundBonesRewardEventFilter;
    ClaimDevelopmentGroundBonesReward(
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      stake?: PromiseOrValue<boolean> | null
    ): ClaimDevelopmentGroundBonesRewardEventFilter;

    "EnterDevelopmentGround(address,uint256,uint256,uint256,uint8)"(
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      lockTime?: PromiseOrValue<BigNumberish> | null,
      entryTime?: null,
      ground?: null
    ): EnterDevelopmentGroundEventFilter;
    EnterDevelopmentGround(
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      lockTime?: PromiseOrValue<BigNumberish> | null,
      entryTime?: null,
      ground?: null
    ): EnterDevelopmentGroundEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "LeaveDevelopmentGround(address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): LeaveDevelopmentGroundEventFilter;
    LeaveDevelopmentGround(
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): LeaveDevelopmentGroundEventFilter;

    "OwnershipHandoverCanceled(address)"(
      pendingOwner?: PromiseOrValue<string> | null
    ): OwnershipHandoverCanceledEventFilter;
    OwnershipHandoverCanceled(
      pendingOwner?: PromiseOrValue<string> | null
    ): OwnershipHandoverCanceledEventFilter;

    "OwnershipHandoverRequested(address)"(
      pendingOwner?: PromiseOrValue<string> | null
    ): OwnershipHandoverRequestedEventFilter;
    OwnershipHandoverRequested(
      pendingOwner?: PromiseOrValue<string> | null
    ): OwnershipHandoverRequestedEventFilter;

    "OwnershipTransferred(address,address)"(
      oldOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      oldOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RemoveBones(address,uint256,uint256)"(
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): RemoveBonesEventFilter;
    RemoveBones(
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): RemoveBonesEventFilter;

    "StakeBonesInDevelopmentGround(address,uint256,uint256)"(
      owner?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): StakeBonesInDevelopmentGroundEventFilter;
    StakeBonesInDevelopmentGround(
      owner?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): StakeBonesInDevelopmentGroundEventFilter;
  };

  estimateGas: {
    bones(overrides?: CallOverrides): Promise<BigNumber>;

    bonesToTime(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateBones(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelOwnershipHandover(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimDevelopmentGroundBonesReward(
      _tokenId: PromiseOrValue<BigNumberish>[],
      _stake: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    completeOwnershipHandover(
      pendingOwner: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    enterDevelopmentGround(
      _tokenId: PromiseOrValue<BigNumberish>[],
      _lockTime: PromiseOrValue<BigNumberish>[],
      _ground: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getDevGroundFeInfo(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDevelopmentGroundBonesReward(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDevelopmentGroundInfo(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrimarySkill(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakedTokens(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _pits: PromiseOrValue<string>,
      _neandersmol: PromiseOrValue<string>,
      _bones: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    leaveDevelopmentGround(
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    neandersmol(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownershipHandoverExpiresAt(
      pendingOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownershipHandoverValidFor(overrides?: CallOverrides): Promise<BigNumber>;

    pits(overrides?: CallOverrides): Promise<BigNumber>;

    removeBones(
      _tokenId: PromiseOrValue<BigNumberish>[],
      _all: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeSingleBones(
      _tokenId: PromiseOrValue<BigNumberish>,
      _pos: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestOwnershipHandover(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAddress(
      _pits: PromiseOrValue<string>,
      _neandersmol: PromiseOrValue<string>,
      _bones: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakeBonesInDevelopmentGround(
      _amount: PromiseOrValue<BigNumberish>[],
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bones(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bonesToTime(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateBones(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelOwnershipHandover(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimDevelopmentGroundBonesReward(
      _tokenId: PromiseOrValue<BigNumberish>[],
      _stake: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    completeOwnershipHandover(
      pendingOwner: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    enterDevelopmentGround(
      _tokenId: PromiseOrValue<BigNumberish>[],
      _lockTime: PromiseOrValue<BigNumberish>[],
      _ground: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getDevGroundFeInfo(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDevelopmentGroundBonesReward(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDevelopmentGroundInfo(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrimarySkill(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakedTokens(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _pits: PromiseOrValue<string>,
      _neandersmol: PromiseOrValue<string>,
      _bones: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    leaveDevelopmentGround(
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    neandersmol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownershipHandoverExpiresAt(
      pendingOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownershipHandoverValidFor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pits(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeBones(
      _tokenId: PromiseOrValue<BigNumberish>[],
      _all: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeSingleBones(
      _tokenId: PromiseOrValue<BigNumberish>,
      _pos: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestOwnershipHandover(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAddress(
      _pits: PromiseOrValue<string>,
      _neandersmol: PromiseOrValue<string>,
      _bones: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakeBonesInDevelopmentGround(
      _amount: PromiseOrValue<BigNumberish>[],
      _tokenId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
